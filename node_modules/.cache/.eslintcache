[{"D:\\webdev\\meteo-app\\src\\index.js":"1","D:\\webdev\\meteo-app\\src\\reportWebVitals.js":"2","D:\\webdev\\meteo-app\\src\\components\\App.js":"3","D:\\webdev\\meteo-app\\src\\components\\AppReducer.js":"4","D:\\webdev\\meteo-app\\src\\components\\CityCurrentWeather.jsx":"5","D:\\webdev\\meteo-app\\src\\components\\CityForecast.jsx":"6","D:\\webdev\\meteo-app\\src\\components\\ThreeHoursForecast.jsx":"7","D:\\webdev\\meteo-app\\src\\functions\\GroupForcastByDay.js":"8","D:\\webdev\\meteo-app\\src\\components\\constants.js":"9","D:\\webdev\\meteo-app\\src\\functions\\FormatDate.js":"10","D:\\webdev\\meteo-app\\src\\components\\CitySearchForm.jsx":"11","D:\\webdev\\meteo-app\\src\\functions\\OWCityGetData.js":"12","D:\\webdev\\meteo-app\\src\\components\\Store.js":"13","D:\\webdev\\meteo-app\\src\\components\\DaySelector.jsx":"14","D:\\webdev\\meteo-app\\src\\functions\\DistinctDays.jsx":"15","D:\\webdev\\meteo-app\\src\\components\\DetailedForecast.jsx":"16","D:\\webdev\\meteo-app\\src\\functions\\GetWindDirection.js":"17","D:\\webdev\\meteo-app\\src\\components\\TempChart.jsx":"18","D:\\webdev\\meteo-app\\src\\components\\WindChart.jsx":"19","D:\\webdev\\meteo-app\\src\\components\\CityAutoSuggest.jsx":"20","D:\\webdev\\meteo-app\\src\\functions\\GetMatchingCities.js":"21","D:\\webdev\\meteo-app\\src\\functions\\GetCountryName.js":"22"},{"size":635,"mtime":1631982010388,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"24"},{"size":1039,"mtime":1635421931005,"results":"26","hashOfConfig":"24"},{"size":1384,"mtime":1635259958412,"results":"27","hashOfConfig":"24"},{"size":4771,"mtime":1635704811504,"results":"28","hashOfConfig":"24"},{"size":1701,"mtime":1635268800255,"results":"29","hashOfConfig":"24"},{"size":4217,"mtime":1635703720928,"results":"30","hashOfConfig":"24"},{"size":1399,"mtime":1634114559975,"results":"31","hashOfConfig":"24"},{"size":7715,"mtime":1635696985968,"results":"32","hashOfConfig":"24"},{"size":887,"mtime":1635186508573,"results":"33","hashOfConfig":"24"},{"size":1099,"mtime":1635517864821,"results":"34","hashOfConfig":"24"},{"size":1285,"mtime":1635683609438,"results":"35","hashOfConfig":"24"},{"size":237,"mtime":1631981928570,"results":"36","hashOfConfig":"24"},{"size":2190,"mtime":1635421734788,"results":"37","hashOfConfig":"24"},{"size":401,"mtime":1634113065986,"results":"38","hashOfConfig":"24"},{"size":5680,"mtime":1635709644426,"results":"39","hashOfConfig":"24"},{"size":775,"mtime":1632764401152,"results":"40","hashOfConfig":"24"},{"size":2535,"mtime":1635423089395,"results":"41","hashOfConfig":"24"},{"size":2629,"mtime":1635352696608,"results":"42","hashOfConfig":"24"},{"size":1980,"mtime":1635688091477,"results":"43","hashOfConfig":"24"},{"size":199,"mtime":1635554451943,"results":"44","hashOfConfig":"24"},{"size":171,"mtime":1635683972393,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ifnbax",{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\webdev\\meteo-app\\src\\index.js",[],"D:\\webdev\\meteo-app\\src\\reportWebVitals.js",[],"D:\\webdev\\meteo-app\\src\\components\\App.js",[],"D:\\webdev\\meteo-app\\src\\components\\AppReducer.js",[],"D:\\webdev\\meteo-app\\src\\components\\CityCurrentWeather.jsx",["102"],"import { useSelector } from \"react-redux\";\r\nimport store from \"./Store.js\";\r\nimport \"../styles/forecast.scss\"\r\nimport { temperatureIcon, windIcon, windDirectionIcon, cloudCoverage } from \"./constants.js\";\r\nimport { weatherIcons } from \"./constants.js\";\r\nimport { GetWindDirection } from \"../functions/GetWindDirection\"\r\nimport { GetCountryName } from \"../functions/GetCountryName.js\";\r\n\r\nconst CityCurrentWeather = () => { \r\n\r\n    const currentWeatherData = state => state.currentWeather;\r\n    const  cityCurrentWeatherData = useSelector(currentWeatherData);\r\n\r\n    const currentStoreTimezone = state => state.timezone;\r\n    const storeTimezone = useSelector(currentStoreTimezone)\r\n\r\n    \r\n    \r\n\r\n    if (cityCurrentWeatherData != null) {    \r\n          \r\n        \r\n    if (cityCurrentWeatherData !== \"error\") {\r\n        const weatherIcon = weatherIcons.filter(element => element.label === cityCurrentWeatherData.weather[0].main)[0].icon\r\n        const weatherIconColor = weatherIcons.filter(element => element.label === cityCurrentWeatherData.weather[0].main)[0].label\r\n\r\n        const localTime = cityCurrentWeatherData.dt + storeTimezone + new Date(cityCurrentWeatherData.dt*1000).getTimezoneOffset()*60;\r\n\r\n        const current = new Date(localTime*1000).toLocaleTimeString(\"fr-FR\")\r\n\r\n        const currentTimeHHMM = current.substring(0, 5)\r\n\r\n        \r\n\r\n        let gust;\r\n        \r\n        if (cityCurrentWeatherData.wind.gust) {\r\n            gust = \" - \"+Math.round(cityCurrentWeatherData.wind.gust)\r\n        } else {\r\n            gust = \"\";\r\n        }\r\n\r\n    return (\r\n            <div className = \"forecast__card forecast__card--current\">\r\n                <div className = \"forecast__card__time-weather forecast__card__time-weather--current\">\r\n                    <div className = \"forecast__card__time-weather__time\">{currentTimeHHMM}</div>\r\n                    <i className={weatherIcon+\" forecast__card__time-weather__icon forecast__card__time-weather__icon--\"+weatherIconColor+\" forecast__card__time-weather__icon--big\"}></i>\r\n                </div>\r\n                {/*<div>{props.forecast.weather[0].description}</div>*/}\r\n                <div className = \"forecast__card__city-info-container\">\r\n                    <div className = \"forecast__card__city\">{cityCurrentWeatherData.name}</div>\r\n                    <div className = \"forecast__card__country\">{GetCountryName(cityCurrentWeatherData.sys.country)}</div>\r\n                </div>\r\n                    {/*<div>{cityCurrentWeatherData.weather[0].main}</div>*/}\r\n                \r\n                <div className = \"forecast__card__data-container\">\r\n                    <div className = \"forecast__card__parameter forecast__card__parameter--header\">\r\n                        <i className={temperatureIcon +\" forecast__card__parameter__icon forecast__card__parameter__icon--temp\"}></i>\r\n                        <div className = \"forecast__card__parameter__value\">{Math.round(cityCurrentWeatherData.main.temp)+\" Â°C\"}</div>\r\n                    </div>\r\n                    <div className = \"forecast__card__parameter forecast__card__parameter--header\">\r\n                        <i className={windIcon +\" forecast__card__parameter__icon forecast__card__parameter__icon--wind\"}></i>\r\n                        <div className = \"forecast__card__parameter__value\">{Math.round(cityCurrentWeatherData.wind.speed)+gust+\" m/s\"}</div>\r\n                    </div>\r\n                    <div className = \"forecast__card__parameter forecast__card__parameter--header\">\r\n                        <i className={cloudCoverage +\" forecast__card__parameter__icon forecast__card__parameter__icon--cloud-coverage\"}></i>\r\n                        <div className = \"forecast__card__parameter__value\">{cityCurrentWeatherData.clouds.all+\" %\"}</div>\r\n                    </div>\r\n                    <div className = \"forecast__card__parameter forecast__card__parameter--header\">\r\n                        <i className={windDirectionIcon +\" forecast__card__parameter__icon forecast__card__parameter__icon--wind-direction\"}></i>\r\n                        <div className = \"forecast__card__parameter__value forecast__card__parameter__value--header\">{GetWindDirection(cityCurrentWeatherData.wind.deg)+\" (\"+cityCurrentWeatherData.wind.deg+\"Â°)\"}</div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>)\r\n        } \r\n        else {\r\n            return (\r\n                <div className = \"forecast__card forecast__card--current\">\r\n                    <div className = \"forecast__card__time-weather__error\">{\"DÃ©solÃ©, je n'ai pas pu trouver cette ville :(\"}</div>\r\n                </div>\r\n            )\r\n        }}\r\n        else {\r\n            return null;\r\n        }\r\n\r\n    \r\n}\r\nexport default CityCurrentWeather","D:\\webdev\\meteo-app\\src\\components\\CityForecast.jsx",["103","104"],"import { useSelector } from \"react-redux\";\r\nimport store from \"./Store.js\";\r\nimport ThreeHoursForecast from \"./ThreeHoursForecast.jsx\";\r\nimport \"../styles/forecast.scss\"\r\nimport { GroupForcastByDay } from \"../functions/GroupForcastByDay.js\";\r\nimport { FormatDate } from \"../functions/FormatDate.js\";\r\nimport DetailedForecast from \"./DetailedForecast.jsx\";\r\n\r\nconst CityForecast = () => { \r\n\r\n    const forecastWeatherData = state => state.forecast;\r\n    const cityForecastWeatherData = useSelector(forecastWeatherData);\r\n\r\n    const currentDay = state => state.currentDay;\r\n    const cityCurrentDay = useSelector(currentDay);\r\n\r\n    if (cityForecastWeatherData !== null) {\r\n\r\n        const forecastsGroupedByDay = GroupForcastByDay(cityForecastWeatherData);\r\n        const dayForecast = forecastsGroupedByDay.find(element => element.date === cityCurrentDay)\r\n        \r\n        //Creating react Elements array for each day\r\n        \r\n        const oneDayReactElements = dayForecast.data.map(forecast => {\r\n            return(\r\n            <ThreeHoursForecast forecast = {forecast}/>\r\n            )\r\n        })\r\n        return (\r\n            <div className = \"forecast__root-container\">\r\n                    {/*<div className = \"forecast__day-container__date\">{FormatDate(new Date(dayForecast.date))}</div>*/}\r\n                    <div className = \"forecast__day-forecasts\">{oneDayReactElements}</div>\r\n                    <DetailedForecast forecast = {dayForecast}/>\r\n            </div>\r\n\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <div>\r\n                <div className = \"forecast__day-forecasts\"></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default CityForecast","D:\\webdev\\meteo-app\\src\\components\\ThreeHoursForecast.jsx",["105"],"import { weatherIcons } from \"./constants\"\r\nimport { temperatureIcon, windIcon,windDirectionIcon, cloudCoverage, rainAmount } from \"./constants\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { GetWindDirection } from \"../functions/GetWindDirection\"\r\n\r\nconst ThreeHoursForecast = (props) => {\r\n    \r\n    const currentStoreTime = state => state.currentTime;\r\n    const storeTime = useSelector(currentStoreTime)\r\n\r\n    const currentStoreTimezone = state => state.timezone;\r\n    const storeTimezone = useSelector(currentStoreTimezone)\r\n\r\n    const localTime = props.forecast.dt + storeTimezone + new Date(props.forecast.dt * 1000).getTimezoneOffset()*60;\r\n    \r\n    const currentTime = new Date(localTime* 1000).toLocaleTimeString(\"fr-FR\")\r\n    const currentTimeHHMM = currentTime.substring(0, 5)\r\n    \r\n    const weatherIcon = weatherIcons.filter(element => element.label === props.forecast.weather[0].main)[0].icon\r\n    const weatherIconColor = weatherIcons.filter(element => element.label === props.forecast.weather[0].main)[0].label\r\n\r\n    const dispatch = useDispatch();\r\n\r\n\r\n\r\n    let cardClass = \"forecast__card\";\r\n    let timeWeatherClass = \"forecast__card__time-weather\";\r\n    let rainInPeriod = \"-\"\r\n    let rainAmountDisplayValue = null;\r\n\r\n    const displayRainValue = () => {\r\n        return(\r\n        <div className = \"forecast__card__parameter\">\r\n            <i className={rainAmount +\" forecast__card__parameter__icon forecast__card__parameter__icon--rain-amount\"}></i>\r\n            <div className = \"forecast__card__parameter__value\">{rainInPeriod+\" mm\"}</div>\r\n        </div>\r\n        )\r\n    }\r\n\r\n    if (props.forecast.dt == storeTime) {\r\n        cardClass = cardClass+\" \"+cardClass+\"--selected\"\r\n        timeWeatherClass = timeWeatherClass+\" \"+timeWeatherClass+\"--selected\"\r\n    }\r\n\r\n    if (props.forecast.rain !== undefined) {\r\n        rainInPeriod = props.forecast.rain['3h'];\r\n        rainAmountDisplayValue = displayRainValue();\r\n    }\r\n    \r\n    return (\r\n    <div className = {cardClass} onClick = {() => {\r\n        console.log(props.forecast.dt)\r\n        dispatch({ type: 'api/putCurrentTimeInState', payload: props.forecast.dt})\r\n    }\r\n    }>\r\n        <div className = {timeWeatherClass}>\r\n            <div className = \"forecast__card__time-weather__time\">{currentTimeHHMM}</div>\r\n            <i className={weatherIcon+\" forecast__card__time-weather__icon forecast__card__time-weather__icon--\"+weatherIconColor}></i>\r\n        </div>\r\n        {/*<div>{props.forecast.weather[0].description}</div>*/}\r\n        <div className = \"forecast__card__data-container\">\r\n            <div className = \"forecast__card__parameter forecast__card__parameter--temp\">\r\n                <i className={temperatureIcon +\" forecast__card__parameter__icon forecast__card__parameter__icon--temp\"}></i>\r\n                <div className = \"forecast__card__parameter__value\">{Math.round(props.forecast.main.temp)+\" Â°C\"}</div>\r\n            </div>\r\n            <div className = \"forecast__card__parameter forecast__card__parameter--wind\">\r\n                <i className={windIcon +\" forecast__card__parameter__icon forecast__card__parameter__icon--wind\"}></i>\r\n                <div className = \"forecast__card__parameter__value\">{Math.round(props.forecast.wind.speed)+\" - \"+Math.round(props.forecast.wind.gust) +\" m/s\"}</div>\r\n            </div>\r\n            <div className = \"forecast__card__parameter forecast__card__parameter--wind-direction\">\r\n                <i className={windDirectionIcon +\" forecast__card__parameter__icon forecast__card__parameter__icon--wind-direction\"}></i>\r\n                <div className = \"forecast__card__parameter__value\">{GetWindDirection(props.forecast.wind.deg)+\" (\"+props.forecast.wind.deg+\"Â°)\"}</div>\r\n            </div>\r\n            <div className = \"forecast__card__parameter\">\r\n                <i className={cloudCoverage +\" forecast__card__parameter__icon forecast__card__parameter__icon--cloud-coverage\"}></i>\r\n                <div className = \"forecast__card__parameter__value\">{props.forecast.clouds.all+\" %\"}</div>\r\n            </div>\r\n            {rainAmountDisplayValue}\r\n        </div>\r\n        \r\n    </div>\r\n    )\r\n}\r\n\r\nexport default ThreeHoursForecast","D:\\webdev\\meteo-app\\src\\functions\\GroupForcastByDay.js",["106","107"]," export const GroupForcastByDay = (cityForecastWeatherData) => {\r\n \r\n //Finding out all distinct dates in the five days forecast\r\n const distinctDays = cityForecastWeatherData.list.map(forecastData => new Date((forecastData.dt + cityForecastWeatherData.city.timezone)*1000).toLocaleDateString(\"en-US\"))\r\n .filter((value, index, self) => self.indexOf(value) === index)\r\n\r\n //PUSH THIS VALUE TO STATE USING DISPATCH\r\n\r\n //Creating Array with forecasts grouped by day.\r\n const forecastsGroupedByDay = [];\r\n\r\n //Creating a new array with the api response.\r\n distinctDays.map(currentDate => {\r\n     //creating a new array to store all forecasts for one distinct day\r\n     const currentDateData = []\r\n     //For each forecast in the state\r\n     cityForecastWeatherData.list.map(forecastData => {\r\n         //If the date is the current date\r\n         if (new Date((forecastData.dt+cityForecastWeatherData.city.timezone + new Date(forecastData.dt * 1000).getTimezoneOffset()*60) * 1000).toLocaleDateString(\"en-US\") === currentDate) {\r\n             //Insert data in the newly created array currentDateData\r\n             currentDateData.push(forecastData)\r\n         }\r\n     })\r\n     //Push an object composed by the current date and all related forecasts datas in forecastsGroupedByDay\r\n     forecastsGroupedByDay.push({\"date\" : currentDate, \"data\" : currentDateData})\r\n })\r\n\r\n return forecastsGroupedByDay\r\n}","D:\\webdev\\meteo-app\\src\\components\\constants.js",[],"D:\\webdev\\meteo-app\\src\\functions\\FormatDate.js",["108","109","110","111"],"export const FormatDate = (date, dataType) => {\r\n    const daysArray = [\"Dim\",\"Lun\", \"Mar\", \"Mer\", \"Jeu\", \"Ven\", \"Sam\"]\r\n    const monthsArray = [\"Janvier\", \"FÃ©vrier\", \"Mars\", \"Avril\", \"Mai\", \"Juin\", \"Juillet\", \"Aout\", \"septembre\", \"octobre\", \"novembre\", \"dÃ©cembre\"] \r\n    let result;\r\n    if (dataType == \"dayOfWeek\") {\r\n        result = daysArray[new Date(date).getDay()];\r\n    }\r\n    else if (dataType == \"dayOfMonth\") {\r\n        result = new Date(date).getDate();\r\n    }\r\n    else if (dataType == \"month\") {\r\n        result = monthsArray[new Date(date).getMonth()];\r\n    }\r\n    else if (dataType == \"full\") {\r\n        const dayOfWeek = daysArray[new Date(date).getDay() -1];\r\n        const dayOfMonth = new Date(date).getDate();\r\n        const month = monthsArray[new Date(date).getMonth()];\r\n        result = dayOfWeek+\" \"+dayOfMonth+\" \"+month\r\n    }\r\n\r\n    \r\n    return result\r\n}","D:\\webdev\\meteo-app\\src\\components\\CitySearchForm.jsx",["112","113"],"import React, {useState} from \"react\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"../styles/CitySearchForm.scss\"\r\nimport CityAutoSuggest from \"./CityAutoSuggest\";\r\nimport { GetMatchingCities } from \"../functions/GetMatchingCities\"\r\n\r\nconst CitySearchForm = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    /*Setting up hooks for fields\r\n    These will be used to maintain a state for the form and allow the send function to work its magic*/\r\n    const [city, setCity] = React.useState(\"\");\r\n\r\n    return (\r\n\r\n    <form className =\"city-search-form\" \r\n        onSubmit = {(e) => {\r\n    e.preventDefault();\r\n        if (city) {\r\n            dispatch({ type: 'api/putCityInState', payload: city})\r\n        }}}>\r\n        <input placeholder = \"Rechercher une ville\" name = \"city\" value = {city} type = \"text\" onChange={e => {\r\n                    setCity(e.target.value)\r\n                    }}>\r\n        </input>\r\n        <button type = \"submit\"><i class=\"fab fa-searchengin\"></i></button>\r\n        <CityAutoSuggest city = {city}/>\r\n    </form>\r\n    )\r\n\r\n}\r\nexport default CitySearchForm","D:\\webdev\\meteo-app\\src\\functions\\OWCityGetData.js",["114","115","116","117","118"],"import { useDispatch } from \"react-redux\";\r\n\r\nexport const OWCityGetData = (city, apiType) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    fetch(\"https://api.openweathermap.org/data/2.5/\"+apiType+\"?q=\"+city+\"&units=metric&appid=c246844ea31d730273416243a59e9e2e\")\r\n    .then (response => response.json())\r\n    .then (response => {\r\n        console.log(response)\r\n        const data = response; //Dans une variable data, on met l'enregistrement renvoyÃ© par l'api\r\n        if (data.cod != \"404\") {\r\n            if (apiType == \"weather\") {\r\n                dispatch({ type: 'api/putWeatherInState', payload: data})\r\n                dispatch({ type: 'api/putTimezoneInState', payload: data.timezone})\r\n            }\r\n            else if (apiType == \"forecast\") {\r\n                dispatch({ type: 'api/putForeCastInState', payload: data})\r\n                dispatch({ type: 'api/putTimezoneInState', payload: data.city.timezone})\r\n            }\r\n        }\r\n        else {\r\n            if (apiType == \"weather\") {\r\n                dispatch({ type: 'api/putWeatherInState', payload: \"error\"})\r\n\r\n            }\r\n            else if (apiType == \"forecast\") {\r\n                dispatch({ type: 'api/putForeCastInState', payload: null})\r\n\r\n            }\r\n        }\r\n        \r\n    })\r\n}\r\n\r\n\r\n\r\n","D:\\webdev\\meteo-app\\src\\components\\Store.js",[],"D:\\webdev\\meteo-app\\src\\components\\DaySelector.jsx",["119","120","121"],"import { DistinctDays } from \"../functions/DistinctDays\"\r\nimport { FormatDate } from \"../functions/FormatDate.js\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport \"../styles/dayselector.scss\"\r\n\r\n\r\nconst DaySelector = () => {\r\n\r\n    const currentWeatherData = state => state.forecast;\r\n    const  cityCurrentWeatherData = useSelector(currentWeatherData);\r\n    const currentDay = state => state.currentDay;\r\n    const  cityCurrentDay = useSelector(currentDay);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    if (cityCurrentWeatherData != null) {\r\n\r\n        const distinctDays = DistinctDays(cityCurrentWeatherData)\r\n\r\n        if (distinctDays.find(day => day == cityCurrentDay) == undefined) {\r\n            dispatch({ type: 'api/putCurrentTimeInState', payload: null})\r\n            dispatch({ type: 'api/putCurrentDayInState', payload: distinctDays[0]})\r\n        }\r\n        \r\n        const listOfDays = distinctDays.map( day => {\r\n            if (day == cityCurrentDay) {\r\n                return (\r\n                <div className = \"day-selector__day day-selector__day\">\r\n                    <div className = \"day-selector__day__of-week day-selector__day__of-week--current\">{FormatDate(day,\"dayOfWeek\")}</div>\r\n                    <div className = \"day-selector__day__of-month day-selector__day__of-month--current\">{FormatDate(day,\"dayOfMonth\")}</div>\r\n                    {/*<div>{FormatDate(day,\"month\")}</div>*/}\r\n                </div>\r\n                )\r\n            }\r\n            else {\r\n                return <div className = \"day-selector__day\" onClick = {() => {\r\n                            dispatch({ type: 'api/putCurrentDayInState', payload: day})}}>\r\n\r\n                            <div className = \"day-selector__day__of-week\">{FormatDate(day,\"dayOfWeek\")}</div>\r\n                            <div className = \"day-selector__day__of-month\">{FormatDate(day,\"dayOfMonth\")}</div>\r\n                            {/*<div>{FormatDate(day,\"month\")}</div>*/}\r\n\r\n                        </div>\r\n            }\r\n        })\r\n        return <div className = \"day-selector\">{listOfDays}</div>\r\n    }\r\n    else {\r\n        return <div></div>\r\n    }\r\n}\r\nexport default DaySelector","D:\\webdev\\meteo-app\\src\\functions\\DistinctDays.jsx",[],"D:\\webdev\\meteo-app\\src\\components\\DetailedForecast.jsx",["122"],"import \"../styles/DetailedForecast.scss\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { weatherIcons } from \"./constants\"\r\nimport { FormatDate } from \"../functions/FormatDate\"\r\nimport Fade from \"react-reveal\"\r\nimport { GetWindDirection } from \"../functions/GetWindDirection\"\r\n\r\nconst DetailedForecast = (props) => {\r\n\r\n\r\n    let weatherIcon;\r\n    let weatherIconColor;\r\n\r\n    const currentTime = state => state.currentTime;\r\n    const cityCurrentTime = useSelector(currentTime);\r\n\r\n    const currentStoreTime = state => state.currentTime;\r\n    const storeTime = useSelector(currentStoreTime)\r\n\r\n    const currentStoreTimezone = state => state.timezone;\r\n    const storeTimezone = useSelector(currentStoreTimezone)\r\n\r\n    const localTime = storeTime + storeTimezone + new Date(storeTime*1000).getTimezoneOffset()*60;\r\n\r\n    /*const currentForecast = state => state.forecast;\r\n    const cityCurrentForecast = useSelector(currentForecast);*/\r\n\r\n\r\n    if (props.forecast.data.find( element => element.dt === cityCurrentTime) !== undefined) {\r\n\r\n    const forecastData = props.forecast.data.find( element => element.dt === cityCurrentTime);\r\n\r\n    const currentIcons = forecastData.weather.map( weather => {\r\n        weatherIcon = weatherIcons.filter(element => element.label === weather.main)[0].icon\r\n        weatherIconColor = weatherIcons.filter(element => element.label === weather.main)[0].label\r\n        return <i className={weatherIcon+\" detailed-forecast__weather forecast__card__time-weather__icon detailed-forecast__weather  forecast__card__time-weather__icon--\"+weatherIconColor}></i>\r\n    })\r\n\r\n    const current = new Date(localTime * 1000).toLocaleTimeString(\"fr-FR\")\r\n    const currentTimeHHMM = current.substring(0, 5)\r\n\r\n    const currentDate = new Date(localTime * 1000).toLocaleDateString(\"fr-FR\")\r\n    const currentDateDDMM = currentDate.substring(0, 5)\r\n    let gusts; \r\n    \r\n    if (forecastData.wind.gust) {\r\n        gusts = forecastData.wind.gust\r\n    }\r\n    else {\r\n        gusts = \" / \"\r\n    }\r\n\r\n    let direction = GetWindDirection(forecastData.wind.deg)\r\n\r\n    return (\r\n        <Fade bottom><div className = \"detailed-forecast\">\r\n                    <div className = \"detailed-forecast__data-container detailed-forecast__data-container--header\">\r\n                            {currentIcons}\r\n                            <div className = \"detailed-forecast__time\">Le {currentDateDDMM+\" Ã  \"+currentTimeHHMM}</div>\r\n                        </div>\r\n                    <div className = \"detailed-forecast__data-container\">\r\n                        <div className = \"detailed-forecast__data-label\">{\"Temperature\"}</div>\r\n                        <div className = \"detailed-forecast__data\">{Math.round(forecastData.main.temp)+\" Â°C\"}</div>\r\n                    </div>\r\n                    <div className = \"detailed-forecast__data-container\">\r\n                        <div className = \"detailed-forecast__data-label\">{\"Ressenti\"}</div>\r\n                        <div className = \"detailed-forecast__data\">{Math.round(forecastData.main.feels_like)+\" Â°C\"}</div>\r\n                    </div>\r\n                    <div className = \"detailed-forecast__data-container\">\r\n                        <div className = \"detailed-forecast__data-label\">{\"Pression AtmosphÃ©rique\"}</div>\r\n                        <div className = \"detailed-forecast__data\">{forecastData.main.grnd_level+\" hPa\"}</div>\r\n                    </div>\r\n                    <div className = \"detailed-forecast__data-container\">\r\n                        <div className = \"detailed-forecast__data-label\">{\"HumiditÃ©\"}</div>\r\n                        <div className = \"detailed-forecast__data\">{forecastData.main.humidity+\" %\"}</div>\r\n                    </div>\r\n                    <div className = \"detailed-forecast__data-container\">\r\n                        <div className = \"detailed-forecast__data-label\">{\"Couverture nuageuse\"}</div>\r\n                        <div className = \"detailed-forecast__data\">{forecastData.clouds.all+\" %\"}</div>\r\n                    </div>\r\n                    <div className = \"detailed-forecast__data-container\">\r\n                        <div className = \"detailed-forecast__data-label\">{\"Vent Moyen\"}</div>\r\n                        <div className = \"detailed-forecast__data\">{forecastData.wind.speed+\" m/s\"}</div>\r\n                    </div>\r\n                    <div className = \"detailed-forecast__data-container\">\r\n                        <div className = \"detailed-forecast__data-label\">{\"Rafales\"}</div>\r\n                        <div className = \"detailed-forecast__data\">{gusts+\" m/s\"}</div>\r\n                    </div>\r\n                    <div className = \"detailed-forecast__data-container\">\r\n                        <div className = \"detailed-forecast__data-label\">{\"Direction\"}</div>\r\n                        <div className = \"detailed-forecast__data\">{direction+\" (\"+forecastData.wind.deg+\"Â°)\"}</div>\r\n                    </div>\r\n\r\n\r\n\r\n        </div></Fade>\r\n\r\n    )\r\n    } else {\r\n        return (\r\n        <Fade bottom>\r\n            <div className = \"detailed-forecast\">\r\n             <div className = \"detailed-forecast__data-container detailed-forecast__data-container--header\">\r\n                            <div className = \"detailed-forecast__time\"></div>\r\n                        </div>\r\n            <div className = \"detailed-forecast\">\r\n                    <div className = \"detailed-forecast__message-container\">\r\n                            Selectionnez un crÃ©neau pour voir les prÃ©visions dÃ©taillÃ©es\r\n                    </div>\r\n        </div>\r\n        </div>\r\n        </Fade>\r\n        )\r\n    }\r\n    }\r\nexport default DetailedForecast","D:\\webdev\\meteo-app\\src\\functions\\GetWindDirection.js",[],"D:\\webdev\\meteo-app\\src\\components\\TempChart.jsx",["123","124","125"],"import { Line, LineChart, XAxis, Tooltip, YAxis, CartesianGrid } from 'recharts';\r\nimport \"../styles/Charts.scss\"\r\nimport { useSelector } from 'react-redux';\r\nimport { GroupForcastByDay } from \"../functions/GroupForcastByDay.js\";\r\nimport { ResponsiveContainer } from 'recharts';\r\n\r\n\r\nconst TempChart= (props) => {\r\n\r\n    const currentStoreDay = state => state.currentDay\r\n    const currentDay = useSelector(currentStoreDay)\r\n\r\n    const forecastWeatherData = state => state.forecast;\r\n    const cityForecastWeatherData = useSelector(forecastWeatherData);\r\n\r\n    const currentStoreTime = state => state.currentTime;\r\n    const storeTime = useSelector(currentStoreTime)\r\n\r\n    const currentStoreTimezone = state => state.timezone;\r\n    const storeTimezone = useSelector(currentStoreTimezone)\r\n\r\n    let tempChartData = [];\r\n\r\n    if (currentDay !== null && cityForecastWeatherData !== null) {\r\n    \r\n        const forecastsGroupedByDay = GroupForcastByDay(cityForecastWeatherData);\r\n        const dayForecast = forecastsGroupedByDay.find(element => element.date === currentDay)\r\n        dayForecast.data.map(element => {\r\n            \r\n            let localTime = element.dt + storeTimezone + new Date(element.dt * 1000).getTimezoneOffset()*60;        \r\n            let currentTime = new Date(localTime* 1000).toLocaleTimeString(\"fr-FR\")\r\n            let currentTimeHHMM = currentTime.substring(0, 5)\r\n            tempChartData.push({'time': currentTimeHHMM, 'temperature' : Math.round(element.main.temp)})\r\n        });\r\n\r\n\r\n\r\n\r\n    return (\r\n    <div className = \"chart-temp\">\r\n        <div className = \"chart-wind__label\">Courbe des tempÃ©ratures ( Â° Celsius)</div>\r\n    <ResponsiveContainer width=\"100%\" height={280}>    \r\n    <LineChart\r\n          data={tempChartData}\r\n          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\r\n      >\r\n          <XAxis dataKey=\"time\"/>\r\n            <YAxis type=\"number\" domain={['dataMin-2', 'dataMax+2']}/>\r\n          <Tooltip />\r\n\r\n          {/*<Line type=\"monotone\" dataKey=\"time\" stroke=\"red\" yAxisId={0} label={{ fill: 'red', fontSize: 20, fontWeight: \"bold\", background: \"white\" }} />*/}\r\n          <Line type=\"monotone\" dataKey=\"temperature\" stroke=\"#5c83a8\" strokeWidth={10} label={{ fill: 'white', fontWeight: 'bold', fontSize: 25 }} dot={{ fill: '#5c83a8', stroke: '#5c83a8', strokeWidth: 5, r: 17,strokeDasharray:''}}/>\r\n        \r\n      </LineChart>\r\n      </ResponsiveContainer>\r\n      </div>\r\n)}\r\n      else {\r\n          return null;\r\n      }\r\n\r\n}\r\n\r\nexport default TempChart\r\n\r\n","D:\\webdev\\meteo-app\\src\\components\\WindChart.jsx",["126","127","128"],"import { ResponsiveContainer, Legend, Bar, BarChart, XAxis, Tooltip, YAxis, CartesianGrid } from 'recharts';\r\nimport \"../styles/Charts.scss\"\r\nimport { useSelector } from 'react-redux';\r\nimport { GroupForcastByDay } from '../functions/GroupForcastByDay';\r\n\r\n\r\nconst WindChart = (props) => {\r\n\r\n    const data =[{time: \"3:00\", wind : 4, gusts : 5}, {time: \"6:00\", wind : 4, gusts : 6}, {time: \"9:00\", wind : 4, gusts : 13}, {time: \"12:00\", wind : 7, gusts : 17}, {time: \"15:00\", wind : 9, gusts : 12}, {time: \"18:00\", wind : 8, gusts : 10}, {time: \"21:00\", wind : 4, gusts : 10}]\r\n\r\n    const currentStoreDay = state => state.currentDay\r\n    const currentDay = useSelector(currentStoreDay)\r\n\r\n    const forecastWeatherData = state => state.forecast;\r\n    const cityForecastWeatherData = useSelector(forecastWeatherData);\r\n\r\n    const currentStoreTime = state => state.currentTime;\r\n    const storeTime = useSelector(currentStoreTime)\r\n\r\n    const currentStoreTimezone = state => state.timezone;\r\n    const storeTimezone = useSelector(currentStoreTimezone)\r\n\r\n    let windChartData = [];\r\n\r\n    if (currentDay !== null && cityForecastWeatherData !== null) {\r\n    \r\n        const forecastsGroupedByDay = GroupForcastByDay(cityForecastWeatherData);\r\n        const dayForecast = forecastsGroupedByDay.find(element => element.date === currentDay)\r\n        dayForecast.data.map(element => {\r\n            \r\n            let localTime = element.dt + storeTimezone + new Date(element.dt * 1000).getTimezoneOffset()*60;        \r\n            let currentTime = new Date(localTime* 1000).toLocaleTimeString(\"fr-FR\")\r\n            let currentTimeHHMM = currentTime.substring(0, 5)\r\n            windChartData.push({'time': currentTimeHHMM, 'vent moyen' : Math.round(element.wind.speed), 'rafales': Math.round(element.wind.gust)})\r\n        });\r\n    \r\n    \r\n    return (\r\n        <div className = \"chart-wind\">\r\n            <div className = \"chart-wind__label\">Vents (m/s)</div>\r\n            <ResponsiveContainer width=\"100%\" height={280}>    \r\n            <BarChart width={730} height={270} data={windChartData} title=\"Vitesse des vents\">\r\n            <Legend layout=\"horizontal\" verticalAlign=\"top\" align=\"center\"/>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"time\" label />\r\n            <YAxis />\r\n            <Tooltip />\r\n\r\n            <Bar dataKey=\"vent moyen\" fill=\"#63b3ff\" />\r\n            <Bar dataKey=\"rafales\" fill=\"orange\" />\r\n            </BarChart>\r\n            </ResponsiveContainer>\r\n        </div>)\r\n        } else {\r\n            return null;\r\n        }\r\n    \r\n\r\n}\r\n\r\nexport default WindChart\r\n\r\n","D:\\webdev\\meteo-app\\src\\components\\CityAutoSuggest.jsx",["129"],"\r\nimport { useEffect, useState} from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst CityAutoSuggest = (props) => {\r\n    \r\n        const [suggestions, setSuggestions] = useState(null);\r\n        const dispatch = useDispatch();\r\n    \r\n        useEffect(() => {\r\n            if (props.city.length > 2) {\r\n                /*fetch(\"//geodb-free-service.wirefreethought.com/v1/geo/cities/?namePrefix=\"+props.city+\"&sort=-population&types=CITY&limit=10\")*/\r\n                fetch(\"https://api.mapbox.com/geocoding/v5/mapbox.places/\"\r\n                +props.city\r\n                +\".json?access_token=pk.eyJ1IjoiY2xlbWVudGJlbmV6ZWNoIiwiYSI6ImNrdmRweXpxMjM3cjUybmx1dG9za24yOGoifQ.8SmT7lwTGEMypFRgCD-HLw&types=place&limit=10&fuzzyMatch=false&language=fr\") \r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    let citiesReactElements = [];\r\n                        citiesReactElements =  data.features.map(element => {\r\n                            return(\r\n                                <div className = \"city-search-form__auto-suggest__city\" onClick = {(e) => {\r\n                                    e.preventDefault();\r\n                                    dispatch({ type: 'api/putCityInState', payload: element.text+\", \"+element.context[element.context.length-1].short_code})\r\n                                    setSuggestions(null);\r\n                                }}>{element.place_name}</div>\r\n                                ) \r\n                        })\r\n                    setSuggestions(citiesReactElements);                \r\n                });\r\n            } else {\r\n                setSuggestions(null);\r\n            }\r\n    }, [props.city]); /*Declaring dependencies*/\r\n            /*rendering suggestions*/\r\n            return (\r\n                <div className = \"city-search-form__auto-suggest\">\r\n                    <div>{suggestions}</div>\r\n                </div>)\r\n\r\n}\r\nexport default CityAutoSuggest","D:\\webdev\\meteo-app\\src\\functions\\GetMatchingCities.js",[],"D:\\webdev\\meteo-app\\src\\functions\\GetCountryName.js",[],{"ruleId":"130","severity":1,"message":"131","line":2,"column":8,"nodeType":"132","messageId":"133","endLine":2,"endColumn":13},{"ruleId":"130","severity":1,"message":"131","line":2,"column":8,"nodeType":"132","messageId":"133","endLine":2,"endColumn":13},{"ruleId":"130","severity":1,"message":"134","line":6,"column":10,"nodeType":"132","messageId":"133","endLine":6,"endColumn":20},{"ruleId":"135","severity":1,"message":"136","line":40,"column":27,"nodeType":"137","messageId":"138","endLine":40,"endColumn":29},{"ruleId":"139","severity":1,"message":"140","line":13,"column":31,"nodeType":"141","messageId":"142","endLine":13,"endColumn":33},{"ruleId":"139","severity":1,"message":"140","line":17,"column":52,"nodeType":"141","messageId":"142","endLine":17,"endColumn":54},{"ruleId":"135","severity":1,"message":"136","line":5,"column":18,"nodeType":"137","messageId":"138","endLine":5,"endColumn":20},{"ruleId":"135","severity":1,"message":"136","line":8,"column":23,"nodeType":"137","messageId":"138","endLine":8,"endColumn":25},{"ruleId":"135","severity":1,"message":"136","line":11,"column":23,"nodeType":"137","messageId":"138","endLine":11,"endColumn":25},{"ruleId":"135","severity":1,"message":"136","line":14,"column":23,"nodeType":"137","messageId":"138","endLine":14,"endColumn":25},{"ruleId":"130","severity":1,"message":"143","line":1,"column":16,"nodeType":"132","messageId":"133","endLine":1,"endColumn":24},{"ruleId":"130","severity":1,"message":"144","line":6,"column":10,"nodeType":"132","messageId":"133","endLine":6,"endColumn":27},{"ruleId":"135","severity":1,"message":"145","line":12,"column":22,"nodeType":"137","messageId":"138","endLine":12,"endColumn":24},{"ruleId":"135","severity":1,"message":"136","line":13,"column":25,"nodeType":"137","messageId":"138","endLine":13,"endColumn":27},{"ruleId":"135","severity":1,"message":"136","line":17,"column":30,"nodeType":"137","messageId":"138","endLine":17,"endColumn":32},{"ruleId":"135","severity":1,"message":"136","line":23,"column":25,"nodeType":"137","messageId":"138","endLine":23,"endColumn":27},{"ruleId":"135","severity":1,"message":"136","line":27,"column":30,"nodeType":"137","messageId":"138","endLine":27,"endColumn":32},{"ruleId":"135","severity":1,"message":"136","line":20,"column":42,"nodeType":"137","messageId":"138","endLine":20,"endColumn":44},{"ruleId":"135","severity":1,"message":"136","line":20,"column":61,"nodeType":"137","messageId":"138","endLine":20,"endColumn":63},{"ruleId":"135","severity":1,"message":"136","line":26,"column":21,"nodeType":"137","messageId":"138","endLine":26,"endColumn":23},{"ruleId":"130","severity":1,"message":"134","line":4,"column":10,"nodeType":"132","messageId":"133","endLine":4,"endColumn":20},{"ruleId":"130","severity":1,"message":"146","line":1,"column":50,"nodeType":"132","messageId":"133","endLine":1,"endColumn":63},{"ruleId":"130","severity":1,"message":"147","line":17,"column":11,"nodeType":"132","messageId":"133","endLine":17,"endColumn":20},{"ruleId":"139","severity":1,"message":"140","line":28,"column":38,"nodeType":"141","messageId":"142","endLine":28,"endColumn":40},{"ruleId":"130","severity":1,"message":"148","line":9,"column":11,"nodeType":"132","messageId":"133","endLine":9,"endColumn":15},{"ruleId":"130","severity":1,"message":"147","line":18,"column":11,"nodeType":"132","messageId":"133","endLine":18,"endColumn":20},{"ruleId":"139","severity":1,"message":"140","line":29,"column":38,"nodeType":"141","messageId":"142","endLine":29,"endColumn":40},{"ruleId":"149","severity":1,"message":"150","line":33,"column":8,"nodeType":"151","endLine":33,"endColumn":20,"suggestions":"152"},"no-unused-vars","'store' is defined but never used.","Identifier","unusedVar","'FormatDate' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useState' is defined but never used.","'GetMatchingCities' is defined but never used.","Expected '!==' and instead saw '!='.","'CartesianGrid' is defined but never used.","'storeTime' is assigned a value but never used.","'data' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["153"],{"desc":"154","fix":"155"},"Update the dependencies array to be: [dispatch, props.city]",{"range":"156","text":"157"},[1702,1714],"[dispatch, props.city]"]