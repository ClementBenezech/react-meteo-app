{"ast":null,"code":"var _jsxFileName = \"D:\\\\webdev\\\\meteo-app\\\\src\\\\components\\\\TempChart.jsx\",\n    _s = $RefreshSig$();\n\nimport { Line, LineChart, XAxis, Tooltip, YAxis, CartesianGrid } from 'recharts';\nimport \"../styles/Charts.scss\";\nimport { useSelector } from 'react-redux';\nimport { GroupForcastByDay } from \"../functions/GroupForcastByDay.js\";\nimport { ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TempChart = props => {\n  _s();\n\n  const currentStoreDay = state => state.currentDay;\n\n  const currentDay = useSelector(currentStoreDay);\n\n  const forecastWeatherData = state => state.forecast;\n\n  const cityForecastWeatherData = useSelector(forecastWeatherData);\n\n  const currentStoreTime = state => state.currentTime;\n\n  const storeTime = useSelector(currentStoreTime);\n\n  const currentStoreTimezone = state => state.timezone;\n\n  const storeTimezone = useSelector(currentStoreTimezone);\n  let tempChartData = [];\n\n  if (currentDay !== null && cityForecastWeatherData !== null) {\n    const forecastsGroupedByDay = GroupForcastByDay(cityForecastWeatherData);\n    const dayForecast = forecastsGroupedByDay.find(element => element.date === currentDay);\n    dayForecast.data.map(element => {\n      let localTime = element.dt + storeTimezone + new Date(element.dt * 1000).getTimezoneOffset() * 60;\n      let currentTime = new Date(localTime * 1000).toLocaleTimeString(\"fr-FR\");\n      let currentTimeHHMM = currentTime.substring(0, 5);\n      tempChartData.push({\n        'time': currentTimeHHMM,\n        'temperature': Math.round(element.main.temp)\n      });\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-temp\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-wind__label\",\n        children: \"Courbe des temp\\xE9ratures ( \\xB0 Celsius)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: 280,\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          data: tempChartData,\n          margin: {\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5\n          },\n          children: [/*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            type: \"number\",\n            domain: ['dataMin-2', 'dataMax+2']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"temperature\",\n            stroke: \"#5c83a8\",\n            strokeWidth: 10,\n            label: {\n              fill: 'white',\n              fontWeight: 'bold',\n              fontSize: 25\n            },\n            dot: {\n              fill: 'orange',\n              stroke: '#5c83a',\n              strokeWidth: 5,\n              r: 17,\n              strokeDasharray: ''\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }, this);\n  } else {\n    return null;\n  }\n};\n\n_s(TempChart, \"RkOwXeoTtJngsHfhFyqDmVVrsro=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = TempChart;\nexport default TempChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"TempChart\");","map":{"version":3,"sources":["D:/webdev/meteo-app/src/components/TempChart.jsx"],"names":["Line","LineChart","XAxis","Tooltip","YAxis","CartesianGrid","useSelector","GroupForcastByDay","ResponsiveContainer","TempChart","props","currentStoreDay","state","currentDay","forecastWeatherData","forecast","cityForecastWeatherData","currentStoreTime","currentTime","storeTime","currentStoreTimezone","timezone","storeTimezone","tempChartData","forecastsGroupedByDay","dayForecast","find","element","date","data","map","localTime","dt","Date","getTimezoneOffset","toLocaleTimeString","currentTimeHHMM","substring","push","Math","round","main","temp","top","right","left","bottom","fill","fontWeight","fontSize","stroke","strokeWidth","r","strokeDasharray"],"mappings":"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","sourcesContent":["import { Line, LineChart, XAxis, Tooltip, YAxis, CartesianGrid } from 'recharts';\r\nimport \"../styles/Charts.scss\"\r\nimport { useSelector } from 'react-redux';\r\nimport { GroupForcastByDay } from \"../functions/GroupForcastByDay.js\";\r\nimport { ResponsiveContainer } from 'recharts';\r\n\r\n\r\nconst TempChart= (props) => {\r\n\r\n    const currentStoreDay = state => state.currentDay\r\n    const currentDay = useSelector(currentStoreDay)\r\n\r\n    const forecastWeatherData = state => state.forecast;\r\n    const cityForecastWeatherData = useSelector(forecastWeatherData);\r\n\r\n    const currentStoreTime = state => state.currentTime;\r\n    const storeTime = useSelector(currentStoreTime)\r\n\r\n    const currentStoreTimezone = state => state.timezone;\r\n    const storeTimezone = useSelector(currentStoreTimezone)\r\n\r\n    let tempChartData = [];\r\n\r\n    if (currentDay !== null && cityForecastWeatherData !== null) {\r\n    \r\n        const forecastsGroupedByDay = GroupForcastByDay(cityForecastWeatherData);\r\n        const dayForecast = forecastsGroupedByDay.find(element => element.date === currentDay)\r\n        dayForecast.data.map(element => {\r\n            \r\n            let localTime = element.dt + storeTimezone + new Date(element.dt * 1000).getTimezoneOffset()*60;        \r\n            let currentTime = new Date(localTime* 1000).toLocaleTimeString(\"fr-FR\")\r\n            let currentTimeHHMM = currentTime.substring(0, 5)\r\n            tempChartData.push({'time': currentTimeHHMM, 'temperature' : Math.round(element.main.temp)})\r\n        });\r\n\r\n\r\n\r\n\r\n    return (\r\n    <div className = \"chart-temp\">\r\n        <div className = \"chart-wind__label\">Courbe des températures ( ° Celsius)</div>\r\n    <ResponsiveContainer width=\"100%\" height={280}>    \r\n    <LineChart\r\n          data={tempChartData}\r\n          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\r\n      >\r\n          <XAxis dataKey=\"time\"/>\r\n            <YAxis type=\"number\" domain={['dataMin-2', 'dataMax+2']}/>\r\n          <Tooltip />\r\n\r\n          {/*<Line type=\"monotone\" dataKey=\"time\" stroke=\"red\" yAxisId={0} label={{ fill: 'red', fontSize: 20, fontWeight: \"bold\", background: \"white\" }} />*/}\r\n          <Line type=\"monotone\" dataKey=\"temperature\" stroke=\"#5c83a8\" strokeWidth={10} label={{ fill: 'white', fontWeight: 'bold', fontSize: 25 }} dot={{ fill: 'orange', stroke: '#5c83a', strokeWidth: 5, r: 17,strokeDasharray:''}}/>\r\n        \r\n      </LineChart>\r\n      </ResponsiveContainer>\r\n      </div>\r\n)}\r\n      else {\r\n          return null;\r\n      }\r\n\r\n}\r\n\r\nexport default TempChart\r\n\r\n"]},"metadata":{},"sourceType":"module"}