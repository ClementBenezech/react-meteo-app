{"ast":null,"code":"var _jsxFileName = \"D:\\\\webdev\\\\meteo-app\\\\src\\\\components\\\\WindChart.jsx\",\n    _s = $RefreshSig$();\n\nimport { ResponsiveContainer, Legend, Bar, BarChart, XAxis, Tooltip, YAxis, CartesianGrid } from 'recharts';\nimport \"../styles/Charts.scss\";\nimport { useSelector } from 'react';\nimport { GroupForcastByDay } from '../functions/GroupForcastByDay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WindChart = props => {\n  _s();\n\n  const data = [{\n    time: \"3:00\",\n    wind: 4,\n    gusts: 5\n  }, {\n    time: \"6:00\",\n    wind: 4,\n    gusts: 6\n  }, {\n    time: \"9:00\",\n    wind: 4,\n    gusts: 13\n  }, {\n    time: \"12:00\",\n    wind: 7,\n    gusts: 17\n  }, {\n    time: \"15:00\",\n    wind: 9,\n    gusts: 12\n  }, {\n    time: \"18:00\",\n    wind: 8,\n    gusts: 10\n  }, {\n    time: \"21:00\",\n    wind: 4,\n    gusts: 10\n  }];\n\n  const currentStoreDay = state => state.currentDay;\n\n  const currentDay = useSelector(currentStoreDay);\n\n  const forecastWeatherData = state => state.forecast;\n\n  const cityForecastWeatherData = useSelector(forecastWeatherData);\n\n  const currentStoreTime = state => state.currentTime;\n\n  const storeTime = useSelector(currentStoreTime);\n\n  const currentStoreTimezone = state => state.timezone;\n\n  const storeTimezone = useSelector(currentStoreTimezone);\n  let windChartData = [];\n\n  if (currentDay !== null && cityForecastWeatherData !== null) {\n    const forecastsGroupedByDay = GroupForcastByDay(cityForecastWeatherData);\n    const dayForecast = forecastsGroupedByDay.find(element => element.date === currentDay);\n    dayForecast.data.map(element => {\n      let localTime = element.dt + storeTimezone + new Date(element.dt * 1000).getTimezoneOffset() * 60;\n      let currentTime = new Date(localTime * 1000).toLocaleTimeString(\"fr-FR\");\n      let currentTimeHHMM = currentTime.substring(0, 5);\n      tempChartData.push({\n        'time': currentTimeHHMM,\n        'temperature': Math.round(element.main.temp)\n      });\n    });\n    return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 280,\n      children: /*#__PURE__*/_jsxDEV(BarChart, {\n        width: 730,\n        height: 270,\n        data: data,\n        title: \"Vitesse des vents\",\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"name\",\n          label: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"wind\",\n          fill: \"#63b3ff\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"gusts\",\n          fill: \"orange\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this);\n  } else {\n    return null;\n  }\n};\n\n_s(WindChart, \"RkOwXeoTtJngsHfhFyqDmVVrsro=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = WindChart;\nexport default WindChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"WindChart\");","map":{"version":3,"sources":["D:/webdev/meteo-app/src/components/WindChart.jsx"],"names":["ResponsiveContainer","Legend","Bar","BarChart","XAxis","Tooltip","YAxis","CartesianGrid","useSelector","GroupForcastByDay","WindChart","props","data","time","wind","gusts","currentStoreDay","state","currentDay","forecastWeatherData","forecast","cityForecastWeatherData","currentStoreTime","currentTime","storeTime","currentStoreTimezone","timezone","storeTimezone","windChartData","forecastsGroupedByDay","dayForecast","find","element","date","map","localTime","dt","Date","getTimezoneOffset","toLocaleTimeString","currentTimeHHMM","substring","tempChartData","push","Math","round","main","temp"],"mappings":"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","sourcesContent":["import { ResponsiveContainer, Legend, Bar, BarChart, XAxis, Tooltip, YAxis, CartesianGrid } from 'recharts';\r\nimport \"../styles/Charts.scss\"\r\nimport { useSelector } from 'react';\r\nimport { GroupForcastByDay } from '../functions/GroupForcastByDay';\r\n\r\n\r\nconst WindChart = (props) => {\r\n\r\n    const data =[{time: \"3:00\", wind : 4, gusts : 5}, {time: \"6:00\", wind : 4, gusts : 6}, {time: \"9:00\", wind : 4, gusts : 13}, {time: \"12:00\", wind : 7, gusts : 17}, {time: \"15:00\", wind : 9, gusts : 12}, {time: \"18:00\", wind : 8, gusts : 10}, {time: \"21:00\", wind : 4, gusts : 10}]\r\n\r\n    const currentStoreDay = state => state.currentDay\r\n    const currentDay = useSelector(currentStoreDay)\r\n\r\n    const forecastWeatherData = state => state.forecast;\r\n    const cityForecastWeatherData = useSelector(forecastWeatherData);\r\n\r\n    const currentStoreTime = state => state.currentTime;\r\n    const storeTime = useSelector(currentStoreTime)\r\n\r\n    const currentStoreTimezone = state => state.timezone;\r\n    const storeTimezone = useSelector(currentStoreTimezone)\r\n\r\n    let windChartData = [];\r\n\r\n    if (currentDay !== null && cityForecastWeatherData !== null) {\r\n    \r\n        const forecastsGroupedByDay = GroupForcastByDay(cityForecastWeatherData);\r\n        const dayForecast = forecastsGroupedByDay.find(element => element.date === currentDay)\r\n        dayForecast.data.map(element => {\r\n            \r\n            let localTime = element.dt + storeTimezone + new Date(element.dt * 1000).getTimezoneOffset()*60;        \r\n            let currentTime = new Date(localTime* 1000).toLocaleTimeString(\"fr-FR\")\r\n            let currentTimeHHMM = currentTime.substring(0, 5)\r\n            tempChartData.push({'time': currentTimeHHMM, 'temperature' : Math.round(element.main.temp)})\r\n        });\r\n    \r\n    \r\n    return (\r\n       \r\n        <ResponsiveContainer width=\"100%\" height={280}>    \r\n        <BarChart width={730} height={270} data={data} title=\"Vitesse des vents\">\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"name\" label />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Legend />\r\n        <Bar dataKey=\"wind\" fill=\"#63b3ff\" />\r\n        <Bar dataKey=\"gusts\" fill=\"orange\" />\r\n        </BarChart>\r\n        </ResponsiveContainer>)}\r\n        else {\r\n            return null;\r\n        }\r\n    \r\n\r\n}\r\n\r\nexport default WindChart\r\n\r\n"]},"metadata":{},"sourceType":"module"}