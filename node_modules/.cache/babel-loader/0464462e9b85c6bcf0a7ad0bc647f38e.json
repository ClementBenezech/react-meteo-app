{"ast":null,"code":"import{weatherIcons}from\"./constants\";import{temperatureIcon,windIcon,windDirectionIcon,cloudCoverage,rainAmount}from\"./constants\";import{useDispatch,useSelector}from\"react-redux\";import{GetWindDirection}from\"../functions/GetWindDirection\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ThreeHoursForecast=function ThreeHoursForecast(props){var currentStoreTime=function currentStoreTime(state){return state.currentTime;};var storeTime=useSelector(currentStoreTime);var currentStoreTimezone=function currentStoreTimezone(state){return state.timezone;};var storeTimezone=useSelector(currentStoreTimezone);var localTime=props.forecast.dt+storeTimezone+new Date(props.forecast.dt*1000).getTimezoneOffset()*60;var currentTime=new Date(localTime*1000).toLocaleTimeString(\"fr-FR\");var currentTimeHHMM=currentTime.substring(0,5);var weatherIcon=weatherIcons.filter(function(element){return element.label===props.forecast.weather[0].main;})[0].icon;var weatherIconColor=weatherIcons.filter(function(element){return element.label===props.forecast.weather[0].main;})[0].label;var dispatch=useDispatch();var cardClass=\"forecast__card\";var timeWeatherClass=\"forecast__card__time-weather\";var rainInPeriod=\"-\";var rainAmountDisplayValue=null;var displayRainValue=function displayRainValue(){return/*#__PURE__*/_jsxs(\"div\",{className:\"forecast__card__parameter\",children:[/*#__PURE__*/_jsx(\"i\",{className:rainAmount+\" forecast__card__parameter__icon forecast__card__parameter__icon--rain-amount\"}),/*#__PURE__*/_jsx(\"div\",{className:\"forecast__card__parameter__value\",children:rainInPeriod+\" mm\"})]});};if(props.forecast.dt==storeTime){cardClass=cardClass+\" \"+cardClass+\"--selected\";timeWeatherClass=timeWeatherClass+\" \"+timeWeatherClass+\"--selected\";}if(props.forecast.rain!==undefined){rainInPeriod=props.forecast.rain['3h'];rainAmountDisplayValue=displayRainValue();}return/*#__PURE__*/_jsxs(\"div\",{className:cardClass,onClick:function onClick(){console.log(props.forecast.dt);dispatch({type:'api/putCurrentTimeInState',payload:props.forecast.dt});},children:[/*#__PURE__*/_jsxs(\"div\",{className:timeWeatherClass,children:[/*#__PURE__*/_jsx(\"div\",{className:\"forecast__card__time-weather__time\",children:currentTimeHHMM}),/*#__PURE__*/_jsx(\"i\",{className:weatherIcon+\" forecast__card__time-weather__icon forecast__card__time-weather__icon--\"+weatherIconColor})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"forecast__card__data-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"forecast__card__parameter forecast__card__parameter--temp\",children:[/*#__PURE__*/_jsx(\"i\",{className:temperatureIcon+\" forecast__card__parameter__icon forecast__card__parameter__icon--temp\"}),/*#__PURE__*/_jsx(\"div\",{className:\"forecast__card__parameter__value\",children:Math.round(props.forecast.main.temp)+\" °C\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"forecast__card__parameter forecast__card__parameter--wind\",children:[/*#__PURE__*/_jsx(\"i\",{className:windIcon+\" forecast__card__parameter__icon forecast__card__parameter__icon--wind\"}),/*#__PURE__*/_jsx(\"div\",{className:\"forecast__card__parameter__value\",children:Math.round(props.forecast.wind.speed)+\" - \"+Math.round(props.forecast.wind.gust)+\" m/s\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"forecast__card__parameter forecast__card__parameter--wind-direction\",children:[/*#__PURE__*/_jsx(\"i\",{className:windDirectionIcon+\" forecast__card__parameter__icon forecast__card__parameter__icon--wind-direction\"}),/*#__PURE__*/_jsx(\"div\",{className:\"forecast__card__parameter__value\",children:GetWindDirection(props.forecast.wind.deg)+\" (\"+props.forecast.wind.deg+\"°)\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"forecast__card__parameter\",children:[/*#__PURE__*/_jsx(\"i\",{className:cloudCoverage+\" forecast__card__parameter__icon forecast__card__parameter__icon--cloud-coverage\"}),/*#__PURE__*/_jsx(\"div\",{className:\"forecast__card__parameter__value\",children:props.forecast.clouds.all+\" %\"})]}),rainAmountDisplayValue]})]});};export default ThreeHoursForecast;","map":{"version":3,"sources":["D:/webdev/meteo-app/src/components/ThreeHoursForecast.jsx"],"names":["weatherIcons","temperatureIcon","windIcon","windDirectionIcon","cloudCoverage","rainAmount","useDispatch","useSelector","GetWindDirection","ThreeHoursForecast","props","currentStoreTime","state","currentTime","storeTime","currentStoreTimezone","timezone","storeTimezone","localTime","forecast","dt","Date","getTimezoneOffset","toLocaleTimeString","currentTimeHHMM","substring","weatherIcon","filter","element","label","weather","main","icon","weatherIconColor","dispatch","cardClass","timeWeatherClass","rainInPeriod","rainAmountDisplayValue","displayRainValue","rain","undefined","console","log","type","payload","Math","round","temp","wind","speed","gust","deg","clouds","all"],"mappings":"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","sourcesContent":["import { weatherIcons } from \"./constants\"\r\nimport { temperatureIcon, windIcon,windDirectionIcon, cloudCoverage, rainAmount } from \"./constants\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { GetWindDirection } from \"../functions/GetWindDirection\"\r\n\r\nconst ThreeHoursForecast = (props) => {\r\n    \r\n    const currentStoreTime = state => state.currentTime;\r\n    const storeTime = useSelector(currentStoreTime)\r\n\r\n    const currentStoreTimezone = state => state.timezone;\r\n    const storeTimezone = useSelector(currentStoreTimezone)\r\n\r\n    const localTime = props.forecast.dt + storeTimezone + new Date(props.forecast.dt * 1000).getTimezoneOffset()*60;\r\n    \r\n    const currentTime = new Date(localTime* 1000).toLocaleTimeString(\"fr-FR\")\r\n    const currentTimeHHMM = currentTime.substring(0, 5)\r\n    \r\n    const weatherIcon = weatherIcons.filter(element => element.label === props.forecast.weather[0].main)[0].icon\r\n    const weatherIconColor = weatherIcons.filter(element => element.label === props.forecast.weather[0].main)[0].label\r\n\r\n    const dispatch = useDispatch();\r\n\r\n\r\n\r\n    let cardClass = \"forecast__card\";\r\n    let timeWeatherClass = \"forecast__card__time-weather\";\r\n    let rainInPeriod = \"-\"\r\n    let rainAmountDisplayValue = null;\r\n\r\n    const displayRainValue = () => {\r\n        return(\r\n        <div className = \"forecast__card__parameter\">\r\n            <i className={rainAmount +\" forecast__card__parameter__icon forecast__card__parameter__icon--rain-amount\"}></i>\r\n            <div className = \"forecast__card__parameter__value\">{rainInPeriod+\" mm\"}</div>\r\n        </div>\r\n        )\r\n    }\r\n\r\n    if (props.forecast.dt == storeTime) {\r\n        cardClass = cardClass+\" \"+cardClass+\"--selected\"\r\n        timeWeatherClass = timeWeatherClass+\" \"+timeWeatherClass+\"--selected\"\r\n    }\r\n\r\n    if (props.forecast.rain !== undefined) {\r\n        rainInPeriod = props.forecast.rain['3h'];\r\n        rainAmountDisplayValue = displayRainValue();\r\n    }\r\n    \r\n    return (\r\n    <div className = {cardClass} onClick = {() => {\r\n        console.log(props.forecast.dt)\r\n        dispatch({ type: 'api/putCurrentTimeInState', payload: props.forecast.dt})\r\n    }\r\n    }>\r\n        <div className = {timeWeatherClass}>\r\n            <div className = \"forecast__card__time-weather__time\">{currentTimeHHMM}</div>\r\n            <i className={weatherIcon+\" forecast__card__time-weather__icon forecast__card__time-weather__icon--\"+weatherIconColor}></i>\r\n        </div>\r\n        {/*<div>{props.forecast.weather[0].description}</div>*/}\r\n        <div className = \"forecast__card__data-container\">\r\n            <div className = \"forecast__card__parameter forecast__card__parameter--temp\">\r\n                <i className={temperatureIcon +\" forecast__card__parameter__icon forecast__card__parameter__icon--temp\"}></i>\r\n                <div className = \"forecast__card__parameter__value\">{Math.round(props.forecast.main.temp)+\" °C\"}</div>\r\n            </div>\r\n            <div className = \"forecast__card__parameter forecast__card__parameter--wind\">\r\n                <i className={windIcon +\" forecast__card__parameter__icon forecast__card__parameter__icon--wind\"}></i>\r\n                <div className = \"forecast__card__parameter__value\">{Math.round(props.forecast.wind.speed)+\" - \"+Math.round(props.forecast.wind.gust) +\" m/s\"}</div>\r\n            </div>\r\n            <div className = \"forecast__card__parameter forecast__card__parameter--wind-direction\">\r\n                <i className={windDirectionIcon +\" forecast__card__parameter__icon forecast__card__parameter__icon--wind-direction\"}></i>\r\n                <div className = \"forecast__card__parameter__value\">{GetWindDirection(props.forecast.wind.deg)+\" (\"+props.forecast.wind.deg+\"°)\"}</div>\r\n            </div>\r\n            <div className = \"forecast__card__parameter\">\r\n                <i className={cloudCoverage +\" forecast__card__parameter__icon forecast__card__parameter__icon--cloud-coverage\"}></i>\r\n                <div className = \"forecast__card__parameter__value\">{props.forecast.clouds.all+\" %\"}</div>\r\n            </div>\r\n            {rainAmountDisplayValue}\r\n        </div>\r\n        \r\n    </div>\r\n    )\r\n}\r\n\r\nexport default ThreeHoursForecast"]},"metadata":{},"sourceType":"module"}