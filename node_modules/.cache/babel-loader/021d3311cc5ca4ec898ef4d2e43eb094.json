{"ast":null,"code":"var _jsxFileName = \"D:\\\\webdev\\\\meteo-app\\\\src\\\\components\\\\CityAutoSuggest.jsx\",\n    _s = $RefreshSig$();\n\nimport { GetMatchingCities } from \"../functions/GetMatchingCities\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CityAutoSuggest = props => {\n  _s();\n\n  const [suggestions, setSuggestions] = useState(null);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (props.city.length > 2) {\n      /*fetch(\"//geodb-free-service.wirefreethought.com/v1/geo/cities/?namePrefix=\"+props.city+\"&sort=-population&types=CITY&limit=10\")*/\n      fetch(\"https://api.mapbox.com/geocoding/v5/mapbox.places/\" + props.city + \".json?access_token=pk.eyJ1IjoiY2xlbWVudGJlbmV6ZWNoIiwiYSI6ImNrdmRweXpxMjM3cjUybmx1dG9za24yOGoifQ.8SmT7lwTGEMypFRgCD-HLw\").then(response => response.json()).then(data => {\n        let citiesReactElements = [];\n        citiesReactElements = data.features.map(element => {\n          if (element.properties.text.includes(\"arrondissement\")) {\n            /*ignore this element type as it will not work for openweather api*/\n          } else {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"city-search-form__auto-suggest__city\",\n              onClick: e => {\n                e.preventDefault();\n                dispatch({\n                  type: 'api/putCityInState',\n                  payload: element.text + \", \" + element.context[2].short_code\n                });\n                setSuggestions(null);\n              },\n              children: element.place_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 25\n            }, this);\n          }\n        });\n        setSuggestions(citiesReactElements);\n        console.log(suggestions);\n      });\n    } else {\n      setSuggestions(null);\n    }\n  }, [props.city]);\n\n  if (suggestions !== null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"city-search-form__auto-suggest\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: suggestions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"city-search-form__auto-suggest\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this);\n  }\n};\n\n_s(CityAutoSuggest, \"teeg9D1sGNMGce/yt2gsfzLnCuM=\", false, function () {\n  return [useDispatch];\n});\n\n_c = CityAutoSuggest;\nexport default CityAutoSuggest;\n\nvar _c;\n\n$RefreshReg$(_c, \"CityAutoSuggest\");","map":{"version":3,"sources":["D:/webdev/meteo-app/src/components/CityAutoSuggest.jsx"],"names":["GetMatchingCities","useEffect","useState","useDispatch","CityAutoSuggest","props","suggestions","setSuggestions","dispatch","city","length","fetch","then","response","json","data","citiesReactElements","features","map","element","properties","text","includes","e","preventDefault","type","payload","context","short_code","place_name","console","log"],"mappings":";;;AACA,SAASA,iBAAT,QAAkC,gCAAlC;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAmC,OAAnC;AACA,SAASC,WAAT,QAA4B,aAA5B;;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAAA;;AAE3B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAMM,QAAQ,GAAGL,WAAW,EAA5B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AAChB,QAAII,KAAK,CAACI,IAAN,CAAWC,MAAX,GAAoB,CAAxB,EAA2B;AAC3B;AACAC,MAAAA,KAAK,CAAC,uDAAqDN,KAAK,CAACI,IAA3D,GAAgE,yHAAjE,CAAL,CAECG,IAFD,CAEMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAFlB,EAGCF,IAHD,CAGMG,IAAI,IAAI;AACV,YAAIC,mBAAmB,GAAG,EAA1B;AACIA,QAAAA,mBAAmB,GAAID,IAAI,CAACE,QAAL,CAAcC,GAAd,CAAkBC,OAAO,IAAI;AAChD,cAAIA,OAAO,CAACC,UAAR,CAAmBC,IAAnB,CAAwBC,QAAxB,CAAiC,gBAAjC,CAAJ,EAAwD;AACpD;AACH,WAFD,MAEO;AACP,gCACI;AAAK,cAAA,SAAS,EAAG,sCAAjB;AAAwD,cAAA,OAAO,EAAKC,CAAD,IAAO;AACtEA,gBAAAA,CAAC,CAACC,cAAF;AACAhB,gBAAAA,QAAQ,CAAC;AAAEiB,kBAAAA,IAAI,EAAE,oBAAR;AAA8BC,kBAAAA,OAAO,EAAEP,OAAO,CAACE,IAAR,GAAa,IAAb,GAAkBF,OAAO,CAACQ,OAAR,CAAgB,CAAhB,EAAmBC;AAA5E,iBAAD,CAAR;AACArB,gBAAAA,cAAc,CAAC,IAAD,CAAd;AACH,eAJD;AAAA,wBAIIY,OAAO,CAACU;AAJZ;AAAA;AAAA;AAAA;AAAA,oBADJ;AAOC;AACJ,SAZsB,CAAvB;AAaJtB,QAAAA,cAAc,CAACS,mBAAD,CAAd;AACAc,QAAAA,OAAO,CAACC,GAAR,CAAYzB,WAAZ;AAEH,OArBD;AAsBH,KAxBG,MAwBG;AACHC,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH;AACA,GA5BY,EA4BV,CAACF,KAAK,CAACI,IAAP,CA5BU,CAAT;;AA6BA,MAAIH,WAAW,KAAK,IAApB,EAA0B;AACtB,wBACI;AAAK,MAAA,SAAS,EAAG,gCAAjB;AAAA,6BACI;AAAA,kBAAMA;AAAN;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAIH,GALD,MAKO;AACH,wBACI;AAAK,MAAA,SAAS,EAAG,gCAAjB;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAIH;AAIR,CAhDD;;GAAMF,e;UAGmBD,W;;;KAHnBC,e;AAiDN,eAAeA,eAAf","sourcesContent":["\r\nimport { GetMatchingCities } from \"../functions/GetMatchingCities\"\r\nimport { useEffect, useState} from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst CityAutoSuggest = (props) => {\r\n    \r\n        const [suggestions, setSuggestions] = useState(null);\r\n        const dispatch = useDispatch();\r\n    \r\n        useEffect(() => {\r\n        if (props.city.length > 2) {\r\n        /*fetch(\"//geodb-free-service.wirefreethought.com/v1/geo/cities/?namePrefix=\"+props.city+\"&sort=-population&types=CITY&limit=10\")*/\r\n        fetch(\"https://api.mapbox.com/geocoding/v5/mapbox.places/\"+props.city+\".json?access_token=pk.eyJ1IjoiY2xlbWVudGJlbmV6ZWNoIiwiYSI6ImNrdmRweXpxMjM3cjUybmx1dG9za24yOGoifQ.8SmT7lwTGEMypFRgCD-HLw\") \r\n        \r\n        .then(response => response.json())\r\n        .then(data => {\r\n            let citiesReactElements = [];\r\n                citiesReactElements =  data.features.map(element => {\r\n                    if (element.properties.text.includes(\"arrondissement\")) {\r\n                        /*ignore this element type as it will not work for openweather api*/\r\n                    } else {\r\n                    return(\r\n                        <div className = \"city-search-form__auto-suggest__city\" onClick = {(e) => {\r\n                            e.preventDefault();\r\n                            dispatch({ type: 'api/putCityInState', payload: element.text+\", \"+element.context[2].short_code})\r\n                            setSuggestions(null);\r\n                        }}>{element.place_name}</div>\r\n                        )\r\n                    }\r\n                })\r\n            setSuggestions(citiesReactElements);\r\n            console.log(suggestions);\r\n                \r\n        });\r\n    } else {\r\n        setSuggestions(null);\r\n    }\r\n    }, [props.city]);\r\n        if (suggestions !== null) {\r\n            return (\r\n                <div className = \"city-search-form__auto-suggest\">\r\n                    <div>{suggestions}</div>\r\n                </div>)\r\n        } else {\r\n            return (\r\n                <div className = \"city-search-form__auto-suggest\">\r\n                    <div></div>\r\n                </div>)\r\n        }\r\n       \r\n\r\n      \r\n}\r\nexport default CityAutoSuggest"]},"metadata":{},"sourceType":"module"}