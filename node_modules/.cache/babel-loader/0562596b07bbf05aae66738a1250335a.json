{"ast":null,"code":"var _jsxFileName = \"D:\\\\webdev\\\\meteo-app\\\\src\\\\components\\\\CityForecast.jsx\",\n    _s = $RefreshSig$();\n\nimport { useSelector } from \"react-redux\";\nimport store from \"./Store.js\";\nimport ThreeHoursForecast from \"./ThreeHoursForecast.jsx\";\nimport \"../styles/forecast.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CityForecast = () => {\n  _s();\n\n  const forecastWeatherData = state => state.forecast;\n\n  const cityForecastWeatherData = useSelector(forecastWeatherData);\n\n  if (cityForecastWeatherData != \"loading\") {\n    //Finding out all distinct dates in the five days forecast\n    const distinctDays = cityForecastWeatherData.list.map(forecastData => new Date(forecastData.dt * 1000).toLocaleDateString(\"fr-FR\")).filter((value, index, self) => self.indexOf(value) === index); //Creating Object with forecasts grouped by day.\n\n    const forecastsGroupedByDay = []; //Creating a new array with the api response.\n\n    distinctDays.map(currentDate => {\n      //creating a new array to store all forecasts for one distinct day\n      const currentDateData = []; //For each forecast in the state\n\n      cityForecastWeatherData.list.map(forecastData => {\n        //If the date is the current date\n        if (new Date(forecastData.dt * 1000).toLocaleDateString(\"fr-FR\") === currentDate) {\n          //Insert data in the newly created array currentDateData\n          currentDateData.push(forecastData);\n        }\n      }); //Push an object composed by the current date and all related forecasts datas in forecastsGroupedByDay\n\n      forecastsGroupedByDay.push({\n        \"date\": currentDate,\n        \"data\": currentDateData\n      });\n    });\n    const ThreeHoursFullForecast = forecastsGroupedByDay.map(oneDayData => {\n      return /*#__PURE__*/_jsxDEV(ThreeHoursForecast, {\n        forecast: oneDayData.data[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: cityForecastWeatherData.city.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecast__cards-container\",\n        children: ThreeHoursFullForecast\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: cityForecastWeatherData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(CityForecast, \"R9M9GEd1gHaeEJlNs6rRqOAV318=\", false, function () {\n  return [useSelector];\n});\n\n_c = CityForecast;\nexport default CityForecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"CityForecast\");","map":{"version":3,"sources":["D:/webdev/meteo-app/src/components/CityForecast.jsx"],"names":["useSelector","store","ThreeHoursForecast","CityForecast","forecastWeatherData","state","forecast","cityForecastWeatherData","distinctDays","list","map","forecastData","Date","dt","toLocaleDateString","filter","value","index","self","indexOf","forecastsGroupedByDay","currentDate","currentDateData","push","ThreeHoursFullForecast","oneDayData","data","city","name"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,kBAAP,MAA+B,0BAA/B;AACA,OAAO,yBAAP;;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAEvB,QAAMC,mBAAmB,GAAGC,KAAK,IAAIA,KAAK,CAACC,QAA3C;;AACA,QAAMC,uBAAuB,GAAGP,WAAW,CAACI,mBAAD,CAA3C;;AAEA,MAAIG,uBAAuB,IAAI,SAA/B,EAA0C;AAEtC;AACA,UAAMC,YAAY,GAAGD,uBAAuB,CAACE,IAAxB,CAA6BC,GAA7B,CAAiCC,YAAY,IAAI,IAAIC,IAAJ,CAASD,YAAY,CAACE,EAAb,GAAkB,IAA3B,EAAiCC,kBAAjC,CAAoD,OAApD,CAAjD,EACpBC,MADoB,CACb,CAACC,KAAD,EAAQC,KAAR,EAAeC,IAAf,KAAwBA,IAAI,CAACC,OAAL,CAAaH,KAAb,MAAwBC,KADnC,CAArB,CAHsC,CAMtC;;AACA,UAAMG,qBAAqB,GAAG,EAA9B,CAPsC,CAStC;;AACAZ,IAAAA,YAAY,CAACE,GAAb,CAAiBW,WAAW,IAAI;AAC5B;AACA,YAAMC,eAAe,GAAG,EAAxB,CAF4B,CAG5B;;AACAf,MAAAA,uBAAuB,CAACE,IAAxB,CAA6BC,GAA7B,CAAiCC,YAAY,IAAI;AAC7C;AACA,YAAI,IAAIC,IAAJ,CAASD,YAAY,CAACE,EAAb,GAAkB,IAA3B,EAAiCC,kBAAjC,CAAoD,OAApD,MAAiEO,WAArE,EAAkF;AAC9E;AACAC,UAAAA,eAAe,CAACC,IAAhB,CAAqBZ,YAArB;AACH;AACJ,OAND,EAJ4B,CAW5B;;AACAS,MAAAA,qBAAqB,CAACG,IAAtB,CAA2B;AAAC,gBAASF,WAAV;AAAuB,gBAASC;AAAhC,OAA3B;AACH,KAbD;AAeA,UAAME,sBAAsB,GAAGJ,qBAAqB,CAACV,GAAtB,CAA0Be,UAAU,IAAI;AACnE,0BACA,QAAC,kBAAD;AAAoB,QAAA,QAAQ,EAAIA,UAAU,CAACC,IAAX,CAAgB,CAAhB;AAAhC;AAAA;AAAA;AAAA;AAAA,cADA;AAGH,KAJ8B,CAA/B;AAMJ,wBACI;AAAA,8BACI;AAAA,kBAAMnB,uBAAuB,CAACoB,IAAxB,CAA6BC;AAAnC;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAG,2BAAjB;AAAA,kBAA8CJ;AAA9C;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMC,GArCD,MAsCK;AACD,wBACI;AAAA,6BACI;AAAA,kBAAMjB;AAAN;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;AAGJ,CApDD;;GAAMJ,Y;UAG8BH,W;;;KAH9BG,Y;AAwDN,eAAeA,YAAf","sourcesContent":["import { useSelector } from \"react-redux\";\r\nimport store from \"./Store.js\";\r\nimport ThreeHoursForecast from \"./ThreeHoursForecast.jsx\";\r\nimport \"../styles/forecast.scss\"\r\n\r\nconst CityForecast = () => { \r\n\r\n    const forecastWeatherData = state => state.forecast;\r\n    const cityForecastWeatherData = useSelector(forecastWeatherData);\r\n\r\n    if (cityForecastWeatherData != \"loading\") {\r\n        \r\n        //Finding out all distinct dates in the five days forecast\r\n        const distinctDays = cityForecastWeatherData.list.map(forecastData => new Date(forecastData.dt * 1000).toLocaleDateString(\"fr-FR\"))\r\n        .filter((value, index, self) => self.indexOf(value) === index)\r\n\r\n        //Creating Object with forecasts grouped by day.\r\n        const forecastsGroupedByDay = [];\r\n\r\n        //Creating a new array with the api response.\r\n        distinctDays.map(currentDate => {\r\n            //creating a new array to store all forecasts for one distinct day\r\n            const currentDateData = []\r\n            //For each forecast in the state\r\n            cityForecastWeatherData.list.map(forecastData => {\r\n                //If the date is the current date\r\n                if (new Date(forecastData.dt * 1000).toLocaleDateString(\"fr-FR\") === currentDate) {\r\n                    //Insert data in the newly created array currentDateData\r\n                    currentDateData.push(forecastData)\r\n                }\r\n            })\r\n            //Push an object composed by the current date and all related forecasts datas in forecastsGroupedByDay\r\n            forecastsGroupedByDay.push({\"date\" : currentDate, \"data\" : currentDateData})\r\n        })\r\n\r\n        const ThreeHoursFullForecast = forecastsGroupedByDay.map(oneDayData => {\r\n            return (\r\n            <ThreeHoursForecast forecast = {oneDayData.data[0]}/>\r\n            )\r\n        })\r\n\r\n    return (\r\n        <div>\r\n            <div>{cityForecastWeatherData.city.name}</div>\r\n            <div className = \"forecast__cards-container\">{ThreeHoursFullForecast}</div>   \r\n        </div>\r\n    )\r\n    }\r\n    else {\r\n        return (\r\n            <div>\r\n                <div>{cityForecastWeatherData}</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default CityForecast"]},"metadata":{},"sourceType":"module"}