{"ast":null,"code":"var _jsxFileName = \"D:\\\\webdev\\\\meteo-app\\\\src\\\\components\\\\ThreeHoursForecast.jsx\";\nimport { weatherIcons } from \"./constants\";\nimport { temperatureIcon, windIcon, windDirectionIcon } from \"./constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ThreeHoursForecast = props => {\n  const currentTime = new Date(props.forecast.dt * 1000).toLocaleTimeString(\"fr-FR\");\n  const currentTimeHHMM = currentTime.substring(0, 5);\n  const weatherIcon = weatherIcons.filter(element => element.label === props.forecast.weather[0].main)[0].icon;\n  const weatherIconColor = weatherIcons.filter(element => element.label === props.forecast.weather[0].main)[0].label;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"forecast__card\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forecast__card__time-weather\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecast__card__time-weather__time\",\n        children: currentTimeHHMM\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n        className: weatherIcon + \" forecast__card__time-weather__icon forecast__card__time-weather__icon--\" + weatherIconColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forecast__card__temp\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        class: temperatureIcon + \" forecast__card__temp__icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecast__card__temp__value\",\n        children: Math.round(props.forecast.main.temp)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forecast__card__wind\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: windIcon + \" forecast__card__wind__icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecast__card__wind__value\",\n        children: Math.round(props.forecast.wind.speed) + \" - \" + Math.round(props.forecast.wind.gust)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forecast__card__wind-direction\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        class: windDirectionIcon + \" forecast__card__wind-direction__icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecast__card__wind-direction__value\",\n        children: props.forecast.wind.deg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ThreeHoursForecast;\nexport default ThreeHoursForecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThreeHoursForecast\");","map":{"version":3,"sources":["D:/webdev/meteo-app/src/components/ThreeHoursForecast.jsx"],"names":["weatherIcons","temperatureIcon","windIcon","windDirectionIcon","ThreeHoursForecast","props","currentTime","Date","forecast","dt","toLocaleTimeString","currentTimeHHMM","substring","weatherIcon","filter","element","label","weather","main","icon","weatherIconColor","Math","round","temp","wind","speed","gust","deg"],"mappings":";AAAA,SAASA,YAAT,QAA6B,aAA7B;AACA,SAASC,eAAT,EAA0BC,QAA1B,EAAmCC,iBAAnC,QAA4D,aAA5D;;;AAEA,MAAMC,kBAAkB,GAAIC,KAAD,IAAW;AAClC,QAAMC,WAAW,GAAG,IAAIC,IAAJ,CAASF,KAAK,CAACG,QAAN,CAAeC,EAAf,GAAoB,IAA7B,EAAmCC,kBAAnC,CAAsD,OAAtD,CAApB;AACA,QAAMC,eAAe,GAAGL,WAAW,CAACM,SAAZ,CAAsB,CAAtB,EAAyB,CAAzB,CAAxB;AACA,QAAMC,WAAW,GAAGb,YAAY,CAACc,MAAb,CAAoBC,OAAO,IAAIA,OAAO,CAACC,KAAR,KAAkBX,KAAK,CAACG,QAAN,CAAeS,OAAf,CAAuB,CAAvB,EAA0BC,IAA3E,EAAiF,CAAjF,EAAoFC,IAAxG;AACA,QAAMC,gBAAgB,GAAGpB,YAAY,CAACc,MAAb,CAAoBC,OAAO,IAAIA,OAAO,CAACC,KAAR,KAAkBX,KAAK,CAACG,QAAN,CAAeS,OAAf,CAAuB,CAAvB,EAA0BC,IAA3E,EAAiF,CAAjF,EAAoFF,KAA7G;AAEA,sBACA;AAAK,IAAA,SAAS,EAAG,gBAAjB;AAAA,4BACI;AAAK,MAAA,SAAS,EAAG,8BAAjB;AAAA,8BACI;AAAK,QAAA,SAAS,EAAG,oCAAjB;AAAA,kBAAuDL;AAAvD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAG,QAAA,SAAS,EAAEE,WAAW,GAAC,0EAAZ,GAAuFO;AAArG;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAMI;AAAK,MAAA,SAAS,EAAG,sBAAjB;AAAA,8BACI;AAAG,QAAA,KAAK,EAAEnB,eAAe,GAAE;AAA3B;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAG,6BAAjB;AAAA,kBAAgDoB,IAAI,CAACC,KAAL,CAAWjB,KAAK,CAACG,QAAN,CAAeU,IAAf,CAAoBK,IAA/B;AAAhD;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,eAUI;AAAK,MAAA,SAAS,EAAG,sBAAjB;AAAA,8BACI;AAAG,QAAA,SAAS,EAAErB,QAAQ,GAAE;AAAxB;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAG,6BAAjB;AAAA,kBAAgDmB,IAAI,CAACC,KAAL,CAAWjB,KAAK,CAACG,QAAN,CAAegB,IAAf,CAAoBC,KAA/B,IAAsC,KAAtC,GAA4CJ,IAAI,CAACC,KAAL,CAAWjB,KAAK,CAACG,QAAN,CAAegB,IAAf,CAAoBE,IAA/B;AAA5F;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAVJ,eAcI;AAAK,MAAA,SAAS,EAAG,gCAAjB;AAAA,8BACI;AAAG,QAAA,KAAK,EAAEvB,iBAAiB,GAAE;AAA7B;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAG,uCAAjB;AAAA,kBAA0DE,KAAK,CAACG,QAAN,CAAegB,IAAf,CAAoBG;AAA9E;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAdJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAsBH,CA5BD;;KAAMvB,kB;AA8BN,eAAeA,kBAAf","sourcesContent":["import { weatherIcons } from \"./constants\"\r\nimport { temperatureIcon, windIcon,windDirectionIcon } from \"./constants\"\r\n\r\nconst ThreeHoursForecast = (props) => {\r\n    const currentTime = new Date(props.forecast.dt * 1000).toLocaleTimeString(\"fr-FR\")\r\n    const currentTimeHHMM = currentTime.substring(0, 5)\r\n    const weatherIcon = weatherIcons.filter(element => element.label === props.forecast.weather[0].main)[0].icon\r\n    const weatherIconColor = weatherIcons.filter(element => element.label === props.forecast.weather[0].main)[0].label\r\n\r\n    return (\r\n    <div className = \"forecast__card\">\r\n        <div className = \"forecast__card__time-weather\">\r\n            <div className = \"forecast__card__time-weather__time\">{currentTimeHHMM}</div>\r\n            <i className={weatherIcon+\" forecast__card__time-weather__icon forecast__card__time-weather__icon--\"+weatherIconColor}></i>\r\n        </div>\r\n        {/*<div>{props.forecast.weather[0].description}</div>*/}\r\n        <div className = \"forecast__card__temp\">\r\n            <i class={temperatureIcon +\" forecast__card__temp__icon\"}></i>\r\n            <div className = \"forecast__card__temp__value\">{Math.round(props.forecast.main.temp)}</div>\r\n        </div>\r\n        <div className = \"forecast__card__wind\">\r\n            <i className={windIcon +\" forecast__card__wind__icon\"}></i>\r\n            <div className = \"forecast__card__wind__value\">{Math.round(props.forecast.wind.speed)+\" - \"+Math.round(props.forecast.wind.gust)}</div>\r\n        </div>\r\n        <div className = \"forecast__card__wind-direction\">\r\n            <i class={windDirectionIcon +\" forecast__card__wind-direction__icon\"}></i>\r\n            <div className = \"forecast__card__wind-direction__value\">{props.forecast.wind.deg}</div>\r\n        </div>\r\n        \r\n    </div>\r\n    )\r\n}\r\n\r\nexport default ThreeHoursForecast"]},"metadata":{},"sourceType":"module"}