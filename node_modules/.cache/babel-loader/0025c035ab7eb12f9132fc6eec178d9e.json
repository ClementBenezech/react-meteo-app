{"ast":null,"code":"var _jsxFileName = \"D:\\\\webdev\\\\meteo-app\\\\src\\\\components\\\\CityAutoSuggest.jsx\",\n    _s = $RefreshSig$();\n\nimport { GetMatchingCities } from \"../functions/GetMatchingCities\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CityAutoSuggest = props => {\n  _s();\n\n  const [suggestions, setSuggestions] = useState(null);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (props.city.length > 2) {\n      fetch(\"http://geodb-free-service.wirefreethought.com/v1/geo/cities/?namePrefix=\" + props.city + \"&sort=-population&types=CITY&limit=10\").then(response => response.json()).then(data => {\n        let citiesReactElements = [];\n        citiesReactElements = data.data.map(element => {\n          if (element.name.includes(\"arrondissement\")) {} else {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"city-search-form__auto-suggest__city\",\n              onClick: e => {\n                e.preventDefault();\n                dispatch({\n                  type: 'api/putCityInState',\n                  payload: element.name + \", \" + element.countryCode\n                });\n                setSuggestions(null);\n              },\n              children: element.name + \" \" + element.country\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 22,\n              columnNumber: 25\n            }, this);\n          }\n        });\n        setSuggestions(citiesReactElements);\n        console.log(suggestions);\n      });\n    } else {\n      setSuggestions(null);\n    }\n  }, [props.city]);\n\n  if (suggestions !== null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"city-search-form__auto-suggest\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: suggestions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"city-search-form__auto-suggest\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this);\n  }\n};\n\n_s(CityAutoSuggest, \"teeg9D1sGNMGce/yt2gsfzLnCuM=\", false, function () {\n  return [useDispatch];\n});\n\n_c = CityAutoSuggest;\nexport default CityAutoSuggest;\n\nvar _c;\n\n$RefreshReg$(_c, \"CityAutoSuggest\");","map":{"version":3,"sources":["D:/webdev/meteo-app/src/components/CityAutoSuggest.jsx"],"names":["GetMatchingCities","useEffect","useState","useDispatch","CityAutoSuggest","props","suggestions","setSuggestions","dispatch","city","length","fetch","then","response","json","data","citiesReactElements","map","element","name","includes","e","preventDefault","type","payload","countryCode","country","console","log"],"mappings":";;;AACA,SAASA,iBAAT,QAAkC,gCAAlC;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAmC,OAAnC;AACA,SAASC,WAAT,QAA4B,aAA5B;;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAAA;;AAE3B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAMM,QAAQ,GAAGL,WAAW,EAA5B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AAChB,QAAII,KAAK,CAACI,IAAN,CAAWC,MAAX,GAAoB,CAAxB,EAA2B;AAC3BC,MAAAA,KAAK,CAAC,6EAA2EN,KAAK,CAACI,IAAjF,GAAsF,uCAAvF,CAAL,CACCG,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,IAAI,IAAI;AACV,YAAIC,mBAAmB,GAAG,EAA1B;AACIA,QAAAA,mBAAmB,GAAID,IAAI,CAACA,IAAL,CAAUE,GAAV,CAAcC,OAAO,IAAI;AAC5C,cAAIA,OAAO,CAACC,IAAR,CAAaC,QAAb,CAAsB,gBAAtB,CAAJ,EAA6C,CAE5C,CAFD,MAEO;AACP,gCACI;AAAK,cAAA,SAAS,EAAG,sCAAjB;AAAwD,cAAA,OAAO,EAAKC,CAAD,IAAO;AACtEA,gBAAAA,CAAC,CAACC,cAAF;AACAd,gBAAAA,QAAQ,CAAC;AAAEe,kBAAAA,IAAI,EAAE,oBAAR;AAA8BC,kBAAAA,OAAO,EAAEN,OAAO,CAACC,IAAR,GAAa,IAAb,GAAkBD,OAAO,CAACO;AAAjE,iBAAD,CAAR;AACAlB,gBAAAA,cAAc,CAAC,IAAD,CAAd;AACH,eAJD;AAAA,wBAIIW,OAAO,CAACC,IAAR,GAAa,GAAb,GAAiBD,OAAO,CAACQ;AAJ7B;AAAA;AAAA;AAAA;AAAA,oBADJ;AAOC;AACJ,SAZsB,CAAvB;AAaJnB,QAAAA,cAAc,CAACS,mBAAD,CAAd;AACAW,QAAAA,OAAO,CAACC,GAAR,CAAYtB,WAAZ;AAEH,OApBD;AAqBH,KAtBG,MAsBG;AACHC,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH;AACA,GA1BY,EA0BV,CAACF,KAAK,CAACI,IAAP,CA1BU,CAAT;;AA2BA,MAAIH,WAAW,KAAK,IAApB,EAA0B;AACtB,wBACI;AAAK,MAAA,SAAS,EAAG,gCAAjB;AAAA,6BACI;AAAA,kBAAMA;AAAN;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAIH,GALD,MAKO;AACH,wBACI;AAAK,MAAA,SAAS,EAAG,gCAAjB;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAIH;AAIR,CA9CD;;GAAMF,e;UAGmBD,W;;;KAHnBC,e;AA+CN,eAAeA,eAAf","sourcesContent":["\r\nimport { GetMatchingCities } from \"../functions/GetMatchingCities\"\r\nimport { useEffect, useState} from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst CityAutoSuggest = (props) => {\r\n    \r\n        const [suggestions, setSuggestions] = useState(null);\r\n        const dispatch = useDispatch();\r\n    \r\n        useEffect(() => {\r\n        if (props.city.length > 2) {\r\n        fetch(\"http://geodb-free-service.wirefreethought.com/v1/geo/cities/?namePrefix=\"+props.city+\"&sort=-population&types=CITY&limit=10\")\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            let citiesReactElements = [];\r\n                citiesReactElements =  data.data.map(element => {\r\n                    if (element.name.includes(\"arrondissement\")) {\r\n\r\n                    } else {\r\n                    return(\r\n                        <div className = \"city-search-form__auto-suggest__city\" onClick = {(e) => {\r\n                            e.preventDefault();\r\n                            dispatch({ type: 'api/putCityInState', payload: element.name+\", \"+element.countryCode})\r\n                            setSuggestions(null);\r\n                        }}>{element.name+\" \"+element.country }</div>\r\n                        )\r\n                    }\r\n                })\r\n            setSuggestions(citiesReactElements);\r\n            console.log(suggestions);\r\n                \r\n        });\r\n    } else {\r\n        setSuggestions(null);\r\n    }\r\n    }, [props.city]);\r\n        if (suggestions !== null) {\r\n            return (\r\n                <div className = \"city-search-form__auto-suggest\">\r\n                    <div>{suggestions}</div>\r\n                </div>)\r\n        } else {\r\n            return (\r\n                <div className = \"city-search-form__auto-suggest\">\r\n                    <div></div>\r\n                </div>)\r\n        }\r\n       \r\n\r\n      \r\n}\r\nexport default CityAutoSuggest"]},"metadata":{},"sourceType":"module"}