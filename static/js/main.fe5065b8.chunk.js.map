{"version":3,"sources":["components/AppReducer.js","components/Store.js","components/constants.js","components/CityCurrentWeather.jsx","components/ThreeHoursForecast.jsx","functions/FormatDate.js","components/CityForecast.jsx","functions/GroupForcastByDay.js","components/CitySearchForm.jsx","functions/OWCityGetData.js","components/App.js","reportWebVitals.js","index.js"],"names":["initialState","currentWeather","forecast","city","store","createStore","state","action","type","payload","console","log","getState","weatherIcons","temperatureIcon","windIcon","CityCurrentWeather","cityCurrentWeatherData","useSelector","weather","main","filter","element","label","icon","weatherIcon","weatherIconColor","className","name","Math","round","temp","wind","speed","gust","windDirectionIcon","deg","ThreeHoursForecast","props","currentTimeHHMM","Date","dt","toLocaleTimeString","substring","FormatDate","date","dayOfWeek","getDay","dayOfMonth","getDate","month","getMonth","CityForecast","cityForecastWeatherData","forecastsGroupedByDay","distinctDays","list","map","forecastData","toLocaleDateString","value","index","self","indexOf","currentDate","currentDateData","push","GroupForcastByDay","ThreeHoursFullForecast","oneDayData","oneDayReactElements","data","CitySearchForm","dispatch","useDispatch","React","useState","setCity","onSubmit","e","preventDefault","placeholder","onChange","target","OWCityGetData","apiType","fetch","then","response","json","cod","App","cityName","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe5065b8.chunk.js","sourcesContent":["const initialState = {currentWeather: null, forecast :null, city : null}\r\n// Use the initialState as a default value\r\nexport default function AppReducer(state = initialState, action) {\r\n  // The reducer normally looks at the action type field to decide what happens  \r\n  switch (action.type) {  \r\n      case 'api/putWeatherInState' : {\r\n        return {\r\n          ...state,\r\n          currentWeather : action.payload\r\n        }\r\n      }\r\n      case 'api/putForeCastInState' : {\r\n        return {\r\n          ...state,\r\n          forecast : action.payload\r\n        }\r\n      }\r\n      case 'api/putCityInState' : {\r\n        return {\r\n          ...state,\r\n          city : action.payload\r\n        }\r\n      }\r\n\r\n    default:      \r\n    // If this reducer doesn't recognize the action type, or doesn't      \r\n    // care about this specific action, return the existing state unchanged \r\n    return state \r\n}}","import { createStore } from 'redux'\r\nimport AppReducer from \"./AppReducer\"\r\n\r\n//Creating the store\r\nlet store = createStore(AppReducer);\r\n//chacking initial value\r\nconsole.log('Initial state: ', store.getState());\r\n\r\nexport default store","export const weatherIcons = [\r\n    {\r\n        \"label\" : \"Clouds\",\r\n        \"icon\" : \"fas fa-cloud\",\r\n        \"color\" : \"grey\"\r\n    },\r\n    {\r\n        \"label\" : \"Rain\",\r\n        \"icon\" : \"fas fa-cloud-rain\",\r\n        \"color\" : \"blue\"\r\n    },\r\n    {\r\n        \"label\" : \"Clear\",\r\n        \"icon\" : \"fas fa-sun\",\r\n        \"color\" : \"yellow\"\r\n    }\r\n]\r\n\r\nexport const temperatureIcon = \"fas fa-thermometer-three-quarters\"\r\nexport const windIcon =\"fas fa-wind\"\r\nexport const windDirectionIcon = \"far fa-compass\"","import { useSelector } from \"react-redux\";\r\nimport store from \"./Store.js\";\r\nimport \"../styles/forecast.scss\"\r\nimport { temperatureIcon, windIcon, windDirectionIcon } from \"./constants.js\";\r\nimport { weatherIcons } from \"./constants.js\";\r\n\r\nconst CityCurrentWeather = () => { \r\n\r\n    const currentWeatherData = state => state.currentWeather;\r\n    const  cityCurrentWeatherData = useSelector(currentWeatherData);\r\n    \r\n\r\n    if (cityCurrentWeatherData != null) {\r\n        \r\n        console.log(cityCurrentWeatherData.weather[0].main)\r\n        console.log(weatherIcons.filter(element => element.label === cityCurrentWeatherData.weather[0].main)[0].icon)\r\n\r\n        const weatherIcon = weatherIcons.filter(element => element.label === cityCurrentWeatherData.weather[0].main)[0].icon\r\n        const weatherIconColor = weatherIcons.filter(element => element.label === cityCurrentWeatherData.weather[0].main)[0].label\r\n    return (\r\n            <div className = \"forecast__card forecast__card--current\">\r\n                <div className = \"forecast__card__time-weather\">\r\n                    <div className = \"forecast__card__time-weather__time\">{\"Actuellement...\"}</div>\r\n                    <i className={weatherIcon+\" forecast__card__time-weather__icon forecast__card__time-weather__icon--\"+weatherIconColor+\" forecast__card__time-weather__icon--big\"}></i>\r\n                </div>\r\n                {/*<div>{props.forecast.weather[0].description}</div>*/}\r\n                <div className = \"forecast__card__city\">{cityCurrentWeatherData.name}</div>\r\n                    {/*<div>{cityCurrentWeatherData.weather[0].main}</div>*/}\r\n                \r\n                <div className = \"forecast__card__parameters-container\">\r\n                    <div className = \"forecast__card__temp\">\r\n                        <i className={temperatureIcon +\" forecast__card__temp__icon\"}></i>\r\n                        <div className = \"forecast__card__temp__value\">{Math.round(cityCurrentWeatherData.main.temp)}</div>\r\n                    </div>\r\n                    <div className = \"forecast__card__wind\">\r\n                        <i className={windIcon +\" forecast__card__wind__icon\"}></i>\r\n                        <div className = \"forecast__card__wind__value\">{Math.round(cityCurrentWeatherData.wind.speed)+\" - \"+Math.round(cityCurrentWeatherData.wind.gust)}</div>\r\n                    </div>\r\n                    <div className = \"forecast__card__wind-direction\">\r\n                        <i className={windDirectionIcon +\" forecast__card__wind-direction__icon\"}></i>\r\n                        <div className = \"forecast__card__wind-direction__value\">{cityCurrentWeatherData.wind.deg}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    )\r\n    }\r\n    else {\r\n        return (\r\n            <div>\r\n                <div>{cityCurrentWeatherData}</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default CityCurrentWeather","import { weatherIcons } from \"./constants\"\r\nimport { temperatureIcon, windIcon,windDirectionIcon } from \"./constants\"\r\n\r\nconst ThreeHoursForecast = (props) => {\r\n    const currentTime = new Date(props.forecast.dt * 1000).toLocaleTimeString(\"fr-FR\")\r\n    const currentTimeHHMM = currentTime.substring(0, 5)\r\n    const weatherIcon = weatherIcons.filter(element => element.label === props.forecast.weather[0].main)[0].icon\r\n    const weatherIconColor = weatherIcons.filter(element => element.label === props.forecast.weather[0].main)[0].label\r\n\r\n    return (\r\n    <div className = \"forecast__card\">\r\n        <div className = \"forecast__card__time-weather\">\r\n            <div className = \"forecast__card__time-weather__time\">{currentTimeHHMM}</div>\r\n            <i className={weatherIcon+\" forecast__card__time-weather__icon forecast__card__time-weather__icon--\"+weatherIconColor}></i>\r\n        </div>\r\n        {/*<div>{props.forecast.weather[0].description}</div>*/}\r\n        <div className = \"forecast__card__temp\">\r\n            <i className={temperatureIcon +\" forecast__card__temp__icon\"}></i>\r\n            <div className = \"forecast__card__temp__value\">{Math.round(props.forecast.main.temp)}</div>\r\n        </div>\r\n        <div className = \"forecast__card__wind\">\r\n            <i className={windIcon +\" forecast__card__wind__icon\"}></i>\r\n            <div className = \"forecast__card__wind__value\">{Math.round(props.forecast.wind.speed)+\" - \"+Math.round(props.forecast.wind.gust)}</div>\r\n        </div>\r\n        <div className = \"forecast__card__wind-direction\">\r\n            <i className={windDirectionIcon +\" forecast__card__wind-direction__icon\"}></i>\r\n            <div className = \"forecast__card__wind-direction__value\">{props.forecast.wind.deg}</div>\r\n        </div>\r\n        \r\n    </div>\r\n    )\r\n}\r\n\r\nexport default ThreeHoursForecast","export const FormatDate = (date) => {\r\n    const daysArray = [\"Lundi\", \"Mardi\", \"Mercredi\", \"Jeudi\", \"Vendredi\", \"Samedi\", \"Dimanche\"]\r\n    const monthsArray = [\"Janvier\", \"Février\", \"Mars\", \"Avril\", \"Mai\", \"Juin\", \"Juillet\", \"Aout\", \"septembre\", \"octobre\", \"novembre\", \"décembre\"]\r\n    const dayOfWeek = daysArray[new Date(date).getDay() -1];\r\n    const dayOfMonth = new Date(date).getDate();\r\n    const month     = monthsArray[new Date(date).getMonth()];\r\n    console.log(dayOfWeek+dayOfMonth+month)\r\n    return dayOfWeek+\" \"+dayOfMonth+\" \"+month\r\n}","import { useSelector } from \"react-redux\";\r\nimport store from \"./Store.js\";\r\nimport ThreeHoursForecast from \"./ThreeHoursForecast.jsx\";\r\nimport \"../styles/forecast.scss\"\r\nimport { GroupForcastByDay } from \"../functions/GroupForcastByDay.js\";\r\nimport { FormatDate } from \"../functions/FormatDate.js\";\r\n\r\nconst CityForecast = () => { \r\n\r\n    const forecastWeatherData = state => state.forecast;\r\n    const cityForecastWeatherData = useSelector(forecastWeatherData);\r\n\r\n    if (cityForecastWeatherData !== null) {\r\n\r\n        const forecastsGroupedByDay = GroupForcastByDay(cityForecastWeatherData);\r\n\r\n        //Creating react Elements array for each day\r\n        const ThreeHoursFullForecast = forecastsGroupedByDay.map(oneDayData => {\r\n                const oneDayReactElements = oneDayData.data.map(forecast => {\r\n                    return(\r\n                    <ThreeHoursForecast forecast = {forecast}/>\r\n                    )\r\n                })\r\n                console.log(oneDayData.date)\r\n        return (\r\n            <div className = \"forecast__day-container\">\r\n                <div className = \"forecast__day-container__date\">{FormatDate(new Date(oneDayData.date))}</div>\r\n                <div className = \"forecast__day-forecasts\">{oneDayReactElements}</div>\r\n            </div>\r\n            )\r\n        })\r\n\r\n    return (\r\n        <div>\r\n            {/*<div>{cityForecastWeatherData.city.name}</div>*/}\r\n            <div className = \"forecast__cards-container\">{ThreeHoursFullForecast}</div>   \r\n        </div>\r\n    )\r\n    }\r\n    else {\r\n        return (\r\n            <div>\r\n                <div>{cityForecastWeatherData}</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default CityForecast"," export const GroupForcastByDay = (cityForecastWeatherData) => {\r\n \r\n //Finding out all distinct dates in the five days forecast\r\n const distinctDays = cityForecastWeatherData.list.map(forecastData => new Date(forecastData.dt * 1000).toLocaleDateString(\"en-US\"))\r\n .filter((value, index, self) => self.indexOf(value) === index)\r\n\r\n //Creating Array with forecasts grouped by day.\r\n const forecastsGroupedByDay = [];\r\n\r\n //Creating a new array with the api response.\r\n distinctDays.map(currentDate => {\r\n     //creating a new array to store all forecasts for one distinct day\r\n     const currentDateData = []\r\n     //For each forecast in the state\r\n     cityForecastWeatherData.list.map(forecastData => {\r\n         //If the date is the current date\r\n         if (new Date(forecastData.dt * 1000).toLocaleDateString(\"en-US\") === currentDate) {\r\n             //Insert data in the newly created array currentDateData\r\n             currentDateData.push(forecastData)\r\n         }\r\n     })\r\n     //Push an object composed by the current date and all related forecasts datas in forecastsGroupedByDay\r\n     forecastsGroupedByDay.push({\"date\" : currentDate, \"data\" : currentDateData})\r\n })\r\n\r\n return forecastsGroupedByDay\r\n}","import React, {useState} from \"react\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"../styles/CitySearchForm.scss\"\r\n\r\nconst CitySearchForm = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    /*Setting up hooks for fields\r\n    These will be used to maintain a state for the form and allow the send function to work its magic*/\r\n    const [city, setCity] = React.useState(\"\");\r\n\r\n    return (\r\n    <form className =\"city-search-form\" onSubmit = {(e) => {\r\n        e.preventDefault();\r\n        if (city) {\r\n            dispatch({ type: 'api/putCityInState', payload: city})\r\n        }\r\n\r\n    }}>\r\n        <input placeholder = \"Rechercher une ville\" name = \"city\" value = {city} type = \"text\" onChange={e => {\r\n                    setCity(e.target.value)\r\n                    }}>\r\n        </input>\r\n        <button type = \"submit\">{\"Go!\"}</button>\r\n    </form>\r\n    )\r\n\r\n}\r\nexport default CitySearchForm","import { useDispatch } from \"react-redux\";\r\n\r\nexport const OWCityGetData = (city, apiType) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    fetch(\"http://api.openweathermap.org/data/2.5/\"+apiType+\"?q=\"+city+\"&units=metric&appid=c246844ea31d730273416243a59e9e2e\")\r\n    .then (response => response.json())\r\n    .then (response => {\r\n        console.log(response)\r\n        const data = response; //Dans une variable data, on met l'enregistrement renvoyé par l'api\r\n        if (data.cod != \"404\") {\r\n            if (apiType == \"weather\") {\r\n                dispatch({ type: 'api/putWeatherInState', payload: data})\r\n            }\r\n            else if (apiType == \"forecast\") {\r\n                dispatch({ type: 'api/putForeCastInState', payload: data})\r\n            }\r\n        }\r\n        else {\r\n            if (apiType == \"weather\") {\r\n                dispatch({ type: 'api/putWeatherInState', payload: null})\r\n            }\r\n            else if (apiType == \"forecast\") {\r\n                dispatch({ type: 'api/putForeCastInState', payload: null})\r\n            }\r\n        }\r\n        \r\n    })\r\n}\r\n\r\n\r\n\r\n","\nimport '../styles/App.css';\nimport CityCurrentWeather from './CityCurrentWeather';\nimport CityForecast from './CityForecast';\nimport CitySearchForm from './CitySearchForm';\nimport '../styles/base.scss'\nimport { OWCityGetData } from '../functions/OWCityGetData';\nimport { useSelector } from 'react-redux';\n\nfunction App() {\n  const currentCity = state => state.city;\n  const cityName = useSelector(currentCity);\n  OWCityGetData(cityName,\"weather\")\n  OWCityGetData(cityName,\"forecast\")\n  return (\n    <div className=\"App\">\n      <div className = \"search-and-result\">\n        <CitySearchForm/>\n        <CityCurrentWeather/>\n      </div>\n      <CityForecast/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport reportWebVitals from './reportWebVitals'\nimport { Provider } from 'react-redux'\nimport store from \"./components/Store.js\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}