{"version":3,"sources":["components/AppReducer.js","components/Store.js","components/constants.js","functions/GetWindDirection.js","components/CityCurrentWeather.jsx","functions/GetCountryName.js","components/ThreeHoursForecast.jsx","functions/GroupForcastByDay.js","functions/FormatDate.js","components/DetailedForecast.jsx","components/CityForecast.jsx","components/CityAutoSuggest.jsx","components/CitySearchForm.jsx","functions/OWCityGetData.js","components/DaySelector.jsx","functions/DistinctDays.jsx","components/TempChart.jsx","components/WindChart.jsx","components/App.js","reportWebVitals.js","index.js"],"names":["initialState","currentWeather","forecast","city","currentDay","currentTime","timezone","store","createStore","state","action","type","payload","console","log","getState","weatherIcons","temperatureIcon","windIcon","countries","GetWindDirection","angle","angleLabel","CityCurrentWeather","countryCode","cityCurrentWeatherData","useSelector","storeTimezone","gust","weatherIcon","filter","element","label","weather","main","icon","weatherIconColor","localTime","dt","Date","getTimezoneOffset","currentTimeHHMM","toLocaleTimeString","substring","wind","Math","round","className","name","sys","country","temp","speed","windDirectionIcon","deg","ThreeHoursForecast","props","storeTime","dispatch","useDispatch","cardClass","onClick","GroupForcastByDay","cityForecastWeatherData","distinctDays","list","map","forecastData","toLocaleDateString","value","index","self","indexOf","forecastsGroupedByDay","currentDate","currentDateData","push","FormatDate","date","dataType","result","daysArray","monthsArray","getDay","getDate","getMonth","DetailedForecast","cityCurrentTime","undefined","data","find","gusts","currentIcons","currentDateDDMM","direction","bottom","feels_like","grnd_level","humidity","clouds","all","CityForecast","cityCurrentDay","dayForecast","oneDayReactElements","CityAutoSuggest","useState","suggestions","setSuggestions","useEffect","length","fetch","then","response","json","citiesReactElements","features","e","preventDefault","text","context","short_code","place_name","CitySearchForm","React","setCity","onSubmit","placeholder","onChange","target","class","OWCityGetData","apiType","cod","DaySelector","day","listOfDays","TempChart","tempChartData","ResponsiveContainer","width","height","LineChart","margin","top","right","left","XAxis","dataKey","YAxis","domain","Tooltip","Line","stroke","strokeWidth","fill","fontWeight","fontSize","dot","r","strokeDasharray","WindChart","windChartData","BarChart","title","Legend","layout","verticalAlign","align","CartesianGrid","Bar","App","cityName","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mXAAMA,EAAe,CAACC,eAAgB,KAAMC,SAAU,KAAMC,KAAO,WAAYC,WAAa,KAAMC,YAAa,KAAMC,SAAU,MCI/H,IAAIC,EAAQC,aDFG,WAAmD,IAA/BC,EAA8B,uDAAtBT,EAAcU,EAAQ,uCAE/D,OAAQA,EAAOC,MACX,IAAK,wBACH,OAAO,2BACFF,GADL,IAEER,eAAiBS,EAAOE,UAG5B,IAAK,yBACH,OAAO,2BACFH,GADL,IAEEP,SAAWQ,EAAOE,UAGtB,IAAK,qBACH,OAAO,2BACFH,GADL,IAEEN,KAAOO,EAAOE,UAGlB,IAAK,yBACH,OAAO,2BACFH,GADL,IAEEH,SAAWI,EAAOE,UAGtB,IAAK,2BACH,OAAO,2BACFH,GADL,IAEEL,WAAaM,EAAOE,UAGxB,IAAK,4BACH,OAAO,2BACFH,GADL,IAEEJ,YAAcK,EAAOE,UAI3B,QAGA,OAAOH,MCvCXI,QAAQC,IAAI,kBAAmBP,EAAMQ,YAEtBR,QCRFS,G,OAAe,CACxB,CACI,MAAU,SACV,KAAS,eACT,MAAU,QAEd,CACI,MAAU,OACV,KAAS,6BACT,MAAU,QAEd,CACI,MAAU,QACV,KAAS,aACT,MAAU,UAEd,CACI,MAAU,UACV,KAAS,wBACT,MAAU,UAEd,CACI,MAAU,OACV,KAAS,mBACT,MAAU,UAEd,CACI,MAAU,OACV,KAAS,cACT,MAAU,UAEd,CACI,MAAU,MACV,KAAS,cACT,MAAU,YAQLC,EAAkB,oCAClBC,EAAU,cAGVC,EAAY,CACrB,GAAM,cACN,GAAM,iBACN,GAAM,UACN,GAAM,aACN,GAAM,YACN,GAAM,UACN,GAAM,SACN,GAAM,WACN,GAAM,cACN,GAAM,qBACN,GAAM,4BACN,GAAM,kBACN,GAAM,YACN,GAAM,aACN,GAAM,QACN,GAAM,YACN,GAAM,WACN,GAAM,iBACN,GAAM,UACN,GAAM,aACN,GAAM,aACN,GAAM,UACN,GAAM,aACN,GAAM,WACN,GAAM,SACN,GAAM,WACN,GAAM,WACN,GAAM,UACN,GAAM,UACN,GAAM,wBACN,GAAM,WACN,GAAM,YACN,GAAM,uBACN,GAAM,WACN,GAAM,eACN,GAAM,UACN,GAAM,WACN,GAAM,WACN,GAAM,SACN,GAAM,WACN,GAAM,mBACN,GAAM,QACN,GAAM,QACN,GAAM,SACN,GAAM,WACN,GAAM,UACN,GAAM,oBACN,GAAM,mBACN,GAAM,kBACN,GAAM,aACN,GAAM,wBACN,GAAM,UACN,GAAM,OACN,GAAM,WACN,GAAM,eACN,GAAM,WACN,GAAM,YACN,GAAM,YACN,GAAM,cACN,GAAM,yBACN,GAAM,cACN,GAAM,iBACN,GAAM,UACN,GAAM,UACN,GAAM,mCACN,GAAM,6CACN,GAAM,gBACN,GAAM,cACN,GAAM,QACN,GAAM,WACN,GAAM,SACN,GAAM,QACN,GAAM,SACN,GAAM,aACN,GAAM,mDACN,GAAM,QACN,GAAM,YACN,GAAM,WACN,GAAM,UACN,GAAM,YACN,GAAM,aACN,GAAM,OACN,GAAM,YACN,GAAM,YACN,GAAM,YACN,GAAM,2BACN,GAAM,mBACN,GAAM,SACN,GAAM,sBACN,GAAM,WACN,GAAM,WACN,GAAM,UACN,GAAM,gBACN,GAAM,mBACN,GAAM,oBACN,GAAM,wBACN,GAAM,gBACN,GAAM,iBACN,GAAM,mBACN,GAAM,qBACN,GAAM,mBACN,GAAM,0BACN,GAAM,eACN,GAAM,sBACN,GAAM,6BACN,GAAM,oBACN,GAAM,4BACN,GAAM,mBACN,GAAM,qDACN,GAAM,kBACN,GAAM,8BACN,GAAM,+BACN,GAAM,oCACN,GAAM,OACN,GAAM,eACN,GAAM,OACN,GAAM,OACN,GAAM,UACN,GAAM,UACN,GAAM,YACN,GAAM,SACN,GAAM,cACN,GAAM,QACN,GAAM,SACN,GAAM,WACN,GAAM,aACN,GAAM,QACN,GAAM,eACN,GAAM,WACN,GAAM,YACN,GAAM,OACN,GAAM,UACN,GAAM,WACN,GAAM,QACN,GAAM,aACN,GAAM,QACN,GAAM,gBACN,GAAM,WACN,GAAM,aACN,GAAM,eACN,GAAM,aACN,GAAM,WACN,GAAM,SACN,GAAM,WACN,GAAM,OACN,GAAM,QACN,GAAM,QACN,GAAM,aACN,GAAM,UACN,GAAM,aACN,GAAM,UACN,GAAM,UACN,GAAM,WA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","file":"static/js/main.4e3db4c0.chunk.js","sourcesContent":["const initialState = {currentWeather: null, forecast :null, city : \"toulouse\", currentDay : null, currentTime: null, timezone: null }\r\n// Use the initialState as a default value\r\nexport default function AppReducer(state = initialState, action) {\r\n  // The reducer normally looks at the action type field to decide what happens  \r\n  switch (action.type) {  \r\n      case 'api/putWeatherInState' : {\r\n        return {\r\n          ...state,\r\n          currentWeather : action.payload\r\n        }\r\n      }\r\n      case 'api/putForeCastInState' : {\r\n        return {\r\n          ...state,\r\n          forecast : action.payload\r\n        }\r\n      }\r\n      case 'api/putCityInState' : {\r\n        return {\r\n          ...state,\r\n          city : action.payload\r\n        }\r\n      }\r\n      case 'api/putTimezoneInState' : {\r\n        return {\r\n          ...state,\r\n          timezone : action.payload\r\n        }\r\n      }\r\n      case 'api/putCurrentDayInState' : {\r\n        return {\r\n          ...state,\r\n          currentDay : action.payload\r\n        }\r\n      }\r\n      case 'api/putCurrentTimeInState' : {\r\n        return {\r\n          ...state,\r\n          currentTime : action.payload\r\n        }\r\n      }\r\n\r\n    default:      \r\n    // If this reducer doesn't recognize the action type, or doesn't      \r\n    // care about this specific action, return the existing state unchanged \r\n    return state \r\n}}","import { createStore } from 'redux'\r\nimport AppReducer from \"./AppReducer\"\r\n\r\n//Creating the store\r\nlet store = createStore(AppReducer);\r\n//chacking initial value\r\nconsole.log('Initial state: ', store.getState());\r\n\r\nexport default store","export const weatherIcons = [\r\n    {\r\n        \"label\" : \"Clouds\",\r\n        \"icon\" : \"fas fa-cloud\",\r\n        \"color\" : \"grey\"\r\n    },\r\n    {\r\n        \"label\" : \"Rain\",\r\n        \"icon\" : \"fas fa-cloud-showers-heavy\",\r\n        \"color\" : \"blue\"\r\n    },\r\n    {\r\n        \"label\" : \"Clear\",\r\n        \"icon\" : \"fas fa-sun\",\r\n        \"color\" : \"yellow\"\r\n    },\r\n    {\r\n        \"label\" : \"Drizzle\",\r\n        \"icon\" : \"fas fa-cloud-sun-rain\",\r\n        \"color\" : \"orange\"\r\n    },\r\n    {\r\n        \"label\" : \"Snow\",\r\n        \"icon\" : \"far fa-snowflake\",\r\n        \"color\" : \"orange\"\r\n    },\r\n    {\r\n        \"label\" : \"Mist\",\r\n        \"icon\" : \"fas fa-smog\",\r\n        \"color\" : \"orange\"\r\n    },\r\n    {\r\n        \"label\" : \"Fog\",\r\n        \"icon\" : \"fas fa-smog\",\r\n        \"color\" : \"orange\"\r\n    }\r\n\r\n\r\n\r\n\r\n]\r\n\r\nexport const temperatureIcon = \"fas fa-thermometer-three-quarters\"\r\nexport const windIcon =\"fas fa-wind\"\r\nexport const windDirectionIcon = \"far fa-compass\"\r\n\r\nexport const countries = {\r\n    \"AF\": \"Afghanistan\",\r\n    \"ZA\": \"Afrique du Sud\",\r\n    \"AL\": \"Albanie\",\r\n    \"DZ\": \"Algérie\",\r\n    \"DE\": \"Allemagne\",\r\n    \"AD\": \"Andorre\",\r\n    \"AO\": \"Angola\",\r\n    \"AI\": \"Anguilla\",\r\n    \"AQ\": \"Antarctique\",\r\n    \"AG\": \"Antigua-et-Barbuda\",\r\n    \"AN\": \"Antilles néerlandaises\",\r\n    \"SA\": \"Arabie saoudite\",\r\n    \"AR\": \"Argentine\",\r\n    \"AM\": \"Arménie\",\r\n    \"AW\": \"Aruba\",\r\n    \"AU\": \"Australie\",\r\n    \"AT\": \"Autriche\",\r\n    \"AZ\": \"Azerbaïdjan\",\r\n    \"BS\": \"Bahamas\",\r\n    \"BH\": \"Bahreïn\",\r\n    \"BD\": \"Bangladesh\",\r\n    \"BB\": \"Barbade\",\r\n    \"BY\": \"Bélarus\",\r\n    \"BE\": \"Belgique\",\r\n    \"BZ\": \"Belize\",\r\n    \"BJ\": \"Bénin\",\r\n    \"BM\": \"Bermudes\",\r\n    \"BT\": \"Bhoutan\",\r\n    \"BO\": \"Bolivie\",\r\n    \"BA\": \"Bosnie-Herzégovine\",\r\n    \"BW\": \"Botswana\",\r\n    \"BR\": \"Brésil\",\r\n    \"BN\": \"Brunéi Darussalam\",\r\n    \"BG\": \"Bulgarie\",\r\n    \"BF\": \"Burkina Faso\",\r\n    \"BI\": \"Burundi\",\r\n    \"KH\": \"Cambodge\",\r\n    \"CM\": \"Cameroun\",\r\n    \"CA\": \"Canada\",\r\n    \"CV\": \"Cap-Vert\",\r\n    \"EA\": \"Ceuta et Melilla\",\r\n    \"CL\": \"Chili\",\r\n    \"CN\": \"Chine\",\r\n    \"CY\": \"Chypre\",\r\n    \"CO\": \"Colombie\",\r\n    \"KM\": \"Comores\",\r\n    \"CG\": \"Congo-Brazzaville\",\r\n    \"KP\": \"Corée du Nord\",\r\n    \"KR\": \"Corée du Sud\",\r\n    \"CR\": \"Costa Rica\",\r\n    \"CI\": \"Côte d’Ivoire\",\r\n    \"HR\": \"Croatie\",\r\n    \"CU\": \"Cuba\",\r\n    \"DK\": \"Danemark\",\r\n    \"DG\": \"Diego Garcia\",\r\n    \"DJ\": \"Djibouti\",\r\n    \"DM\": \"Dominique\",\r\n    \"EG\": \"Égypte\",\r\n    \"SV\": \"El Salvador\",\r\n    \"AE\": \"Émirats arabes unis\",\r\n    \"EC\": \"Équateur\",\r\n    \"ER\": \"Érythrée\",\r\n    \"ES\": \"Espagne\",\r\n    \"EE\": \"Estonie\",\r\n    \"VA\": \"État de la Cité du Vatican\",\r\n    \"FM\": \"États fédérés de Micronésie\",\r\n    \"US\": \"États-Unis\",\r\n    \"ET\": \"Éthiopie\",\r\n    \"FJ\": \"Fidji\",\r\n    \"FI\": \"Finlande\",\r\n    \"FR\": \"France\",\r\n    \"GA\": \"Gabon\",\r\n    \"GM\": \"Gambie\",\r\n    \"GE\": \"Géorgie\",\r\n    \"GS\": \"Géorgie du Sud et les îles Sandwich du Sud\",\r\n    \"GH\": \"Ghana\",\r\n    \"GI\": \"Gibraltar\",\r\n    \"GR\": \"Grèce\",\r\n    \"GD\": \"Grenade\",\r\n    \"GL\": \"Groenland\",\r\n    \"GP\": \"Guadeloupe\",\r\n    \"GU\": \"Guam\",\r\n    \"GT\": \"Guatemala\",\r\n    \"GG\": \"Guernesey\",\r\n    \"GN\": \"Guinée\",\r\n    \"GQ\": \"Guinée équatoriale\",\r\n    \"GW\": \"Guinée-Bissau\",\r\n    \"GY\": \"Guyana\",\r\n    \"GF\": \"Guyane française\",\r\n    \"HT\": \"Haïti\",\r\n    \"HN\": \"Honduras\",\r\n    \"HU\": \"Hongrie\",\r\n    \"BV\": \"Île Bouvet\",\r\n    \"CX\": \"Île Christmas\",\r\n    \"CP\": \"Île Clipperton\",\r\n    \"AC\": \"Île de l'Ascension\",\r\n    \"IM\": \"Île de Man\",\r\n    \"NF\": \"Île Norfolk\",\r\n    \"AX\": \"Îles Åland\",\r\n    \"KY\": \"Îles Caïmans\",\r\n    \"IC\": \"Îles Canaries\",\r\n    \"CC\": \"Îles Cocos - Keeling\",\r\n    \"CK\": \"Îles Cook\",\r\n    \"FO\": \"Îles Féroé\",\r\n    \"HM\": \"Îles Heard et MacDonald\",\r\n    \"FK\": \"Îles Malouines\",\r\n    \"MP\": \"Îles Mariannes du Nord\",\r\n    \"MH\": \"Îles Marshall\",\r\n    \"UM\": \"Îles Mineures Éloignées des États-Unis\",\r\n    \"SB\": \"Îles Salomon\",\r\n    \"TC\": \"Îles Turks et Caïques\",\r\n    \"VG\": \"Îles Vierges britanniques\",\r\n    \"VI\": \"Îles Vierges des États-Unis\",\r\n    \"IN\": \"Inde\",\r\n    \"ID\": \"Indonésie\",\r\n    \"IQ\": \"Irak\",\r\n    \"IR\": \"Iran\",\r\n    \"IE\": \"Irlande\",\r\n    \"IS\": \"Islande\",\r\n    \"IL\": \"Israël\",\r\n    \"IT\": \"Italie\",\r\n    \"JM\": \"Jamaïque\",\r\n    \"JP\": \"Japon\",\r\n    \"JE\": \"Jersey\",\r\n    \"JO\": \"Jordanie\",\r\n    \"KZ\": \"Kazakhstan\",\r\n    \"KE\": \"Kenya\",\r\n    \"KG\": \"Kirghizistan\",\r\n    \"KI\": \"Kiribati\",\r\n    \"KW\": \"Koweït\",\r\n    \"LA\": \"Laos\",\r\n    \"LS\": \"Lesotho\",\r\n    \"LV\": \"Lettonie\",\r\n    \"LB\": \"Liban\",\r\n    \"LR\": \"Libéria\",\r\n    \"LY\": \"Libye\",\r\n    \"LI\": \"Liechtenstein\",\r\n    \"LT\": \"Lituanie\",\r\n    \"LU\": \"Luxembourg\",\r\n    \"MK\": \"Macédoine\",\r\n    \"MG\": \"Madagascar\",\r\n    \"MY\": \"Malaisie\",\r\n    \"MW\": \"Malawi\",\r\n    \"MV\": \"Maldives\",\r\n    \"ML\": \"Mali\",\r\n    \"MT\": \"Malte\",\r\n    \"MA\": \"Maroc\",\r\n    \"MQ\": \"Martinique\",\r\n    \"MU\": \"Maurice\",\r\n    \"MR\": \"Mauritanie\",\r\n    \"YT\": \"Mayotte\",\r\n    \"MX\": \"Mexique\",\r\n    \"MD\": \"Moldavie\",\r\n    \"MC\": \"Monaco\",\r\n    \"MN\": \"Mongolie\",\r\n    \"ME\": \"Monténégro\",\r\n    \"MS\": \"Montserrat\",\r\n    \"MZ\": \"Mozambique\",\r\n    \"MM\": \"Myanmar\",\r\n    \"NA\": \"Namibie\",\r\n    \"NR\": \"Nauru\",\r\n    \"NP\": \"Népal\",\r\n    \"NI\": \"Nicaragua\",\r\n    \"NE\": \"Niger\",\r\n    \"NG\": \"Nigéria\",\r\n    \"NU\": \"Niue\",\r\n    \"NO\": \"Norvège\",\r\n    \"NC\": \"Nouvelle-Calédonie\",\r\n    \"NZ\": \"Nouvelle-Zélande\",\r\n    \"OM\": \"Oman\",\r\n    \"UG\": \"Ouganda\",\r\n    \"UZ\": \"Ouzbékistan\",\r\n    \"PK\": \"Pakistan\",\r\n    \"PW\": \"Palaos\",\r\n    \"PA\": \"Panama\",\r\n    \"PG\": \"Papouasie-Nouvelle-Guinée\",\r\n    \"PY\": \"Paraguay\",\r\n    \"NL\": \"Pays-Bas\",\r\n    \"PE\": \"Pérou\",\r\n    \"PH\": \"Philippines\",\r\n    \"PN\": \"Pitcairn\",\r\n    \"PL\": \"Pologne\",\r\n    \"PF\": \"Polynésie française\",\r\n    \"PR\": \"Porto Rico\",\r\n    \"PT\": \"Portugal\",\r\n    \"QA\": \"Qatar\",\r\n    \"HK\": \"R.A.S. chinoise de Hong Kong\",\r\n    \"MO\": \"R.A.S. chinoise de Macao\",\r\n    \"QO\": \"régions éloignées de l’Océanie\",\r\n    \"CF\": \"République centrafricaine\",\r\n    \"CD\": \"République démocratique du Congo\",\r\n    \"DO\": \"République dominicaine\",\r\n    \"CZ\": \"République tchèque\",\r\n    \"RE\": \"Réunion\",\r\n    \"RO\": \"Roumanie\",\r\n    \"GB\": \"Royaume-Uni\",\r\n    \"RU\": \"Russie\",\r\n    \"RW\": \"Rwanda\",\r\n    \"EH\": \"Sahara occidental\",\r\n    \"BL\": \"Saint-Barthélémy\",\r\n    \"KN\": \"Saint-Kitts-et-Nevis\",\r\n    \"SM\": \"Saint-Marin\",\r\n    \"MF\": \"Saint-Martin\",\r\n    \"PM\": \"Saint-Pierre-et-Miquelon\",\r\n    \"VC\": \"Saint-Vincent-et-les Grenadines\",\r\n    \"SH\": \"Sainte-Hélène\",\r\n    \"LC\": \"Sainte-Lucie\",\r\n    \"WS\": \"Samoa\",\r\n    \"AS\": \"Samoa américaines\",\r\n    \"ST\": \"Sao Tomé-et-Principe\",\r\n    \"SN\": \"Sénégal\",\r\n    \"RS\": \"Serbie\",\r\n    \"CS\": \"Serbie-et-Monténégro\",\r\n    \"SC\": \"Seychelles\",\r\n    \"SL\": \"Sierra Leone\",\r\n    \"SG\": \"Singapour\",\r\n    \"SK\": \"Slovaquie\",\r\n    \"SI\": \"Slovénie\",\r\n    \"SO\": \"Somalie\",\r\n    \"SD\": \"Soudan\",\r\n    \"LK\": \"Sri Lanka\",\r\n    \"SE\": \"Suède\",\r\n    \"CH\": \"Suisse\",\r\n    \"SR\": \"Suriname\",\r\n    \"SJ\": \"Svalbard et Île Jan Mayen\",\r\n    \"SZ\": \"Swaziland\",\r\n    \"SY\": \"Syrie\",\r\n    \"TJ\": \"Tadjikistan\",\r\n    \"TW\": \"Taïwan\",\r\n    \"TZ\": \"Tanzanie\",\r\n    \"TD\": \"Tchad\",\r\n    \"TF\": \"Terres australes françaises\",\r\n    \"IO\": \"Territoire britannique de l'océan Indien\",\r\n    \"PS\": \"Territoire palestinien\",\r\n    \"TH\": \"Thaïlande\",\r\n    \"TL\": \"Timor oriental\",\r\n    \"TG\": \"Togo\",\r\n    \"TK\": \"Tokelau\",\r\n    \"TO\": \"Tonga\",\r\n    \"TT\": \"Trinité-et-Tobago\",\r\n    \"TA\": \"Tristan da Cunha\",\r\n    \"TN\": \"Tunisie\",\r\n    \"TM\": \"Turkménistan\",\r\n    \"TR\": \"Turquie\",\r\n    \"TV\": \"Tuvalu\",\r\n    \"UA\": \"Ukraine\",\r\n    \"EU\": \"Union européenne\",\r\n    \"UY\": \"Uruguay\",\r\n    \"VU\": \"Vanuatu\",\r\n    \"VE\": \"Venezuela\",\r\n    \"VN\": \"Viêt Nam\",\r\n    \"WF\": \"Wallis-et-Futuna\",\r\n    \"YE\": \"Yémen\",\r\n    \"ZM\": \"Zambie\",\r\n    \"ZW\": \"Zimbabwe\"\r\n}","export const GetWindDirection = (angle) => {\r\n \r\n    //Finding out all distinct dates in the five days forecast\r\n    let angleLabel;\r\n    if (angle > 15 && angle <= 60) {\r\n        angleLabel = \"Nord-Est\"\r\n    } else if (angle > 60 && angle <= 105) {\r\n        angleLabel =\"Est\"\r\n    } else if (angle > 105 && angle <= 150) {\r\n        angleLabel = \"Sud-Est\"\r\n    } else if (angle > 150 && angle <= 195) {\r\n        angleLabel =\"Sud\"\r\n    } else if (angle > 195 && angle <= 240) {\r\n        angleLabel =\"Sud-Ouest\"\r\n    } else if (angle > 240 && angle <= 285) {\r\n        angleLabel =\"Ouest\"\r\n    } else if (angle > 285 && angle <= 330) {\r\n        angleLabel =\"Nord-Ouest\"\r\n    } else if (angle > 330 || angle <= 15) {\r\n        angleLabel =\"Nord\"\r\n    }\r\n\r\n    return angleLabel\r\n}","import { useSelector } from \"react-redux\";\r\nimport store from \"./Store.js\";\r\nimport \"../styles/forecast.scss\"\r\nimport { temperatureIcon, windIcon, windDirectionIcon } from \"./constants.js\";\r\nimport { weatherIcons } from \"./constants.js\";\r\nimport { GetWindDirection } from \"../functions/GetWindDirection\"\r\nimport { GetCountryName } from \"../functions/GetCountryName.js\";\r\n\r\nconst CityCurrentWeather = () => { \r\n\r\n    const currentWeatherData = state => state.currentWeather;\r\n    const  cityCurrentWeatherData = useSelector(currentWeatherData);\r\n\r\n    const currentStoreTimezone = state => state.timezone;\r\n    const storeTimezone = useSelector(currentStoreTimezone)\r\n\r\n    \r\n    \r\n\r\n    if (cityCurrentWeatherData != null) {    \r\n          \r\n        \r\n    if (cityCurrentWeatherData !== \"error\") {\r\n        const weatherIcon = weatherIcons.filter(element => element.label === cityCurrentWeatherData.weather[0].main)[0].icon\r\n        const weatherIconColor = weatherIcons.filter(element => element.label === cityCurrentWeatherData.weather[0].main)[0].label\r\n\r\n        const localTime = cityCurrentWeatherData.dt + storeTimezone + new Date(cityCurrentWeatherData.dt*1000).getTimezoneOffset()*60;\r\n\r\n        const current = new Date(localTime*1000).toLocaleTimeString(\"fr-FR\")\r\n\r\n        const currentTimeHHMM = current.substring(0, 5)\r\n\r\n        \r\n\r\n        let gust;\r\n        \r\n        if (cityCurrentWeatherData.wind.gust) {\r\n            gust = \" - \"+Math.round(cityCurrentWeatherData.wind.gust)\r\n        } else {\r\n            gust = \"\";\r\n        }\r\n\r\n    return (\r\n            <div className = \"forecast__card forecast__card--current\">\r\n                <div className = \"forecast__card__time-weather forecast__card__time-weather--current\">\r\n                    <div className = \"forecast__card__time-weather__time\">{currentTimeHHMM}</div>\r\n                    <i className={weatherIcon+\" forecast__card__time-weather__icon forecast__card__time-weather__icon--\"+weatherIconColor+\" forecast__card__time-weather__icon--big\"}></i>\r\n                </div>\r\n                {/*<div>{props.forecast.weather[0].description}</div>*/}\r\n                <div className = \"forecast__card__city-info-container\">\r\n                    <div className = \"forecast__card__city\">{cityCurrentWeatherData.name}</div>\r\n                    <div className = \"forecast__card__country\">{GetCountryName(cityCurrentWeatherData.sys.country)}</div>\r\n                </div>\r\n                    {/*<div>{cityCurrentWeatherData.weather[0].main}</div>*/}\r\n                \r\n                <div className = \"forecast__card__data-container\">\r\n                    <div className = \"forecast__card__temp forecast__card__temp--header\">\r\n                        <i className={temperatureIcon +\" forecast__card__temp__icon\"}></i>\r\n                        <div className = \"forecast__card__temp__value\">{Math.round(cityCurrentWeatherData.main.temp)}</div>\r\n                    </div>\r\n                    <div className = \"forecast__card__wind forecast__card__wind--header\">\r\n                        <i className={windIcon +\" forecast__card__wind__icon\"}></i>\r\n                        <div className = \"forecast__card__wind__value\">{Math.round(cityCurrentWeatherData.wind.speed)+gust}</div>\r\n                    </div>\r\n                    <div className = \"forecast__card__wind-direction forecast__card__wind-direction--header\">\r\n                        <i className={windDirectionIcon +\" forecast__card__wind-direction__icon\"}></i>\r\n                        <div className = \"forecast__card__wind-direction__value forecast__card__wind-direction__value--header\">{GetWindDirection(cityCurrentWeatherData.wind.deg)+\" (\"+cityCurrentWeatherData.wind.deg+\"°)\"}</div>\r\n                    </div>\r\n                </div>\r\n            </div>)\r\n        } \r\n        else {\r\n            return (\r\n                <div className = \"forecast__card forecast__card--current\">\r\n                    <div className = \"forecast__card__time-weather__error\">{\"Désolé, je n'ai pas pu trouver cette ville :(\"}</div>\r\n                </div>\r\n            )\r\n        }}\r\n        else {\r\n            return null;\r\n        }\r\n\r\n    \r\n}\r\nexport default CityCurrentWeather","import { countries } from \"../components/constants\";\r\n\r\nexport const GetCountryName = (countryCode) => {\r\n    console.log(countries);\r\n    return countries[countryCode]\r\n}","import { weatherIcons } from \"./constants\"\r\nimport { temperatureIcon, windIcon,windDirectionIcon } from \"./constants\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { GetWindDirection } from \"../functions/GetWindDirection\"\r\n\r\nconst ThreeHoursForecast = (props) => {\r\n    \r\n    const currentStoreTime = state => state.currentTime;\r\n    const storeTime = useSelector(currentStoreTime)\r\n\r\n    const currentStoreTimezone = state => state.timezone;\r\n    const storeTimezone = useSelector(currentStoreTimezone)\r\n\r\n    const localTime = props.forecast.dt + storeTimezone + new Date(props.forecast.dt * 1000).getTimezoneOffset()*60;\r\n    \r\n    const currentTime = new Date(localTime* 1000).toLocaleTimeString(\"fr-FR\")\r\n    const currentTimeHHMM = currentTime.substring(0, 5)\r\n    \r\n    const weatherIcon = weatherIcons.filter(element => element.label === props.forecast.weather[0].main)[0].icon\r\n    const weatherIconColor = weatherIcons.filter(element => element.label === props.forecast.weather[0].main)[0].label\r\n\r\n    const dispatch = useDispatch();\r\n\r\n\r\n\r\n\r\n\r\n    let cardClass = \"forecast__card\";\r\n\r\n    if (props.forecast.dt == storeTime) {\r\n        cardClass = cardClass+\" \"+\"forecast__card--selected\"\r\n    }\r\n\r\n    return (\r\n    <div className = {cardClass} onClick = {() => {\r\n        console.log(props.forecast.dt)\r\n        dispatch({ type: 'api/putCurrentTimeInState', payload: props.forecast.dt})\r\n    }\r\n    }>\r\n        <div className = \"forecast__card__time-weather\">\r\n            <div className = \"forecast__card__time-weather__time\">{currentTimeHHMM}</div>\r\n            <i className={weatherIcon+\" forecast__card__time-weather__icon forecast__card__time-weather__icon--\"+weatherIconColor}></i>\r\n        </div>\r\n        {/*<div>{props.forecast.weather[0].description}</div>*/}\r\n        <div className = \"forecast__card__data-container\">\r\n            <div className = \"forecast__card__temp\">\r\n                <i className={temperatureIcon +\" forecast__card__temp__icon\"}></i>\r\n                <div className = \"forecast__card__temp__value\">{Math.round(props.forecast.main.temp)}</div>\r\n            </div>\r\n            <div className = \"forecast__card__wind\">\r\n                <i className={windIcon +\" forecast__card__wind__icon\"}></i>\r\n                <div className = \"forecast__card__wind__value\">{Math.round(props.forecast.wind.speed)+\" - \"+Math.round(props.forecast.wind.gust)}</div>\r\n            </div>\r\n            <div className = \"forecast__card__wind-direction\">\r\n                <i className={windDirectionIcon +\" forecast__card__wind-direction__icon\"}></i>\r\n                <div className = \"forecast__card__wind-direction__value\">{GetWindDirection(props.forecast.wind.deg)+\" (\"+props.forecast.wind.deg+\"°)\"}</div>\r\n            </div>\r\n        </div>\r\n        \r\n    </div>\r\n    )\r\n}\r\n\r\nexport default ThreeHoursForecast"," export const GroupForcastByDay = (cityForecastWeatherData) => {\r\n \r\n //Finding out all distinct dates in the five days forecast\r\n const distinctDays = cityForecastWeatherData.list.map(forecastData => new Date((forecastData.dt + cityForecastWeatherData.city.timezone)*1000).toLocaleDateString(\"en-US\"))\r\n .filter((value, index, self) => self.indexOf(value) === index)\r\n\r\n //PUSH THIS VALUE TO STATE USING DISPATCH\r\n\r\n //Creating Array with forecasts grouped by day.\r\n const forecastsGroupedByDay = [];\r\n\r\n //Creating a new array with the api response.\r\n distinctDays.map(currentDate => {\r\n     //creating a new array to store all forecasts for one distinct day\r\n     const currentDateData = []\r\n     //For each forecast in the state\r\n     cityForecastWeatherData.list.map(forecastData => {\r\n         //If the date is the current date\r\n         if (new Date((forecastData.dt+cityForecastWeatherData.city.timezone + new Date(forecastData.dt * 1000).getTimezoneOffset()*60) * 1000).toLocaleDateString(\"en-US\") === currentDate) {\r\n             //Insert data in the newly created array currentDateData\r\n             currentDateData.push(forecastData)\r\n         }\r\n     })\r\n     //Push an object composed by the current date and all related forecasts datas in forecastsGroupedByDay\r\n     forecastsGroupedByDay.push({\"date\" : currentDate, \"data\" : currentDateData})\r\n })\r\n\r\n return forecastsGroupedByDay\r\n}","export const FormatDate = (date, dataType) => {\r\n    const daysArray = [\"Dim\",\"Lun\", \"Mar\", \"Mer\", \"Jeu\", \"Ven\", \"Sam\"]\r\n    const monthsArray = [\"Janvier\", \"Février\", \"Mars\", \"Avril\", \"Mai\", \"Juin\", \"Juillet\", \"Aout\", \"septembre\", \"octobre\", \"novembre\", \"décembre\"] \r\n    let result;\r\n    if (dataType == \"dayOfWeek\") {\r\n        result = daysArray[new Date(date).getDay()];\r\n    }\r\n    else if (dataType == \"dayOfMonth\") {\r\n        result = new Date(date).getDate();\r\n    }\r\n    else if (dataType == \"month\") {\r\n        result = monthsArray[new Date(date).getMonth()];\r\n    }\r\n    else if (dataType == \"full\") {\r\n        const dayOfWeek = daysArray[new Date(date).getDay() -1];\r\n        const dayOfMonth = new Date(date).getDate();\r\n        const month = monthsArray[new Date(date).getMonth()];\r\n        result = dayOfWeek+\" \"+dayOfMonth+\" \"+month\r\n    }\r\n\r\n    \r\n    return result\r\n}","import \"../styles/DetailedForecast.scss\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { weatherIcons } from \"./constants\"\r\nimport { FormatDate } from \"../functions/FormatDate\"\r\nimport Fade from \"react-reveal\"\r\nimport { GetWindDirection } from \"../functions/GetWindDirection\"\r\n\r\nconst DetailedForecast = (props) => {\r\n\r\n\r\n    let weatherIcon;\r\n    let weatherIconColor;\r\n\r\n    const currentTime = state => state.currentTime;\r\n    const cityCurrentTime = useSelector(currentTime);\r\n\r\n    const currentStoreTime = state => state.currentTime;\r\n    const storeTime = useSelector(currentStoreTime)\r\n\r\n    const currentStoreTimezone = state => state.timezone;\r\n    const storeTimezone = useSelector(currentStoreTimezone)\r\n\r\n    const localTime = storeTime + storeTimezone + new Date(storeTime*1000).getTimezoneOffset()*60;\r\n\r\n    /*const currentForecast = state => state.forecast;\r\n    const cityCurrentForecast = useSelector(currentForecast);*/\r\n\r\n\r\n    if (props.forecast.data.find( element => element.dt === cityCurrentTime) !== undefined) {\r\n\r\n    const forecastData = props.forecast.data.find( element => element.dt === cityCurrentTime);\r\n\r\n    const currentIcons = forecastData.weather.map( weather => {\r\n        weatherIcon = weatherIcons.filter(element => element.label === weather.main)[0].icon\r\n        weatherIconColor = weatherIcons.filter(element => element.label === weather.main)[0].label\r\n        return <i className={weatherIcon+\" forecast__card__time-weather__icon forecast__card__time-weather__icon--\"+weatherIconColor}></i>\r\n    })\r\n\r\n    const current = new Date(localTime * 1000).toLocaleTimeString(\"fr-FR\")\r\n    const currentTimeHHMM = current.substring(0, 5)\r\n\r\n    const currentDate = new Date(localTime * 1000).toLocaleDateString(\"fr-FR\")\r\n    const currentDateDDMM = currentDate.substring(0, 5)\r\n    let gusts; \r\n    \r\n    if (forecastData.wind.gust) {\r\n        gusts = forecastData.wind.gust\r\n    }\r\n    else {\r\n        gusts = \" / \"\r\n    }\r\n\r\n    let direction = GetWindDirection(forecastData.wind.deg)\r\n\r\n    return (\r\n        <Fade bottom><div className = \"detailed-forecast\">\r\n                    <div className = \"detailed-forecast__data-container\">\r\n                            {currentIcons}\r\n                            <div className = \"detailed-forecast__time\">Le {currentDateDDMM+\" à \"+currentTimeHHMM}</div>\r\n                        </div>\r\n                    <div className = \"detailed-forecast__data-container\">\r\n                        <div className = \"detailed-forecast__data-label\">{\"Temperature\"}</div>\r\n                        <div className = \"detailed-forecast__data\">{Math.round(forecastData.main.temp)+\" °C\"}</div>\r\n                    </div>\r\n                    <div className = \"detailed-forecast__data-container\">\r\n                        <div className = \"detailed-forecast__data-label\">{\"Ressenti\"}</div>\r\n                        <div className = \"detailed-forecast__data\">{Math.round(forecastData.main.feels_like)+\" °C\"}</div>\r\n                    </div>\r\n                    <div className = \"detailed-forecast__data-container\">\r\n                        <div className = \"detailed-forecast__data-label\">{\"Pression Atmosphérique\"}</div>\r\n                        <div className = \"detailed-forecast__data\">{forecastData.main.grnd_level+\" hPa\"}</div>\r\n                    </div>\r\n                    <div className = \"detailed-forecast__data-container\">\r\n                        <div className = \"detailed-forecast__data-label\">{\"Humidité\"}</div>\r\n                        <div className = \"detailed-forecast__data\">{forecastData.main.humidity+\" %\"}</div>\r\n                    </div>\r\n                    <div className = \"detailed-forecast__data-container\">\r\n                        <div className = \"detailed-forecast__data-label\">{\"Couverture nuageuse\"}</div>\r\n                        <div className = \"detailed-forecast__data\">{forecastData.clouds.all+\" %\"}</div>\r\n                    </div>\r\n                    <div className = \"detailed-forecast__data-container\">\r\n                        <div className = \"detailed-forecast__data-label\">{\"Vent Moyen\"}</div>\r\n                        <div className = \"detailed-forecast__data\">{forecastData.wind.speed+\" m/s\"}</div>\r\n                    </div>\r\n                    <div className = \"detailed-forecast__data-container\">\r\n                        <div className = \"detailed-forecast__data-label\">{\"Rafales\"}</div>\r\n                        <div className = \"detailed-forecast__data\">{gusts+\" m/s\"}</div>\r\n                    </div>\r\n                    <div className = \"detailed-forecast__data-container\">\r\n                        <div className = \"detailed-forecast__data-label\">{\"Direction\"}</div>\r\n                        <div className = \"detailed-forecast__data\">{direction+\" (\"+forecastData.wind.deg+\"°)\"}</div>\r\n                    </div>\r\n\r\n\r\n\r\n        </div></Fade>\r\n\r\n    )\r\n    } else {\r\n        return (\r\n        <Fade bottom><div className = \"detailed-forecast\">\r\n                    <div className = \"detailed-forecast__data-container\">\r\n\r\n                            <div className = \"detailed-forecast__time\">Selectionnez un créneau pour voir les prévisions détaillées</div>\r\n                    </div>\r\n        </div>\r\n        </Fade>\r\n        )\r\n    }\r\n    }\r\nexport default DetailedForecast","import { useSelector } from \"react-redux\";\r\nimport store from \"./Store.js\";\r\nimport ThreeHoursForecast from \"./ThreeHoursForecast.jsx\";\r\nimport \"../styles/forecast.scss\"\r\nimport { GroupForcastByDay } from \"../functions/GroupForcastByDay.js\";\r\nimport { FormatDate } from \"../functions/FormatDate.js\";\r\nimport DetailedForecast from \"./DetailedForecast.jsx\";\r\n\r\nconst CityForecast = () => { \r\n\r\n    const forecastWeatherData = state => state.forecast;\r\n    const cityForecastWeatherData = useSelector(forecastWeatherData);\r\n\r\n    const currentDay = state => state.currentDay;\r\n    const cityCurrentDay = useSelector(currentDay);\r\n\r\n    if (cityForecastWeatherData !== null) {\r\n\r\n        const forecastsGroupedByDay = GroupForcastByDay(cityForecastWeatherData);\r\n        const dayForecast = forecastsGroupedByDay.find(element => element.date === cityCurrentDay)\r\n        \r\n        //Creating react Elements array for each day\r\n        \r\n        const oneDayReactElements = dayForecast.data.map(forecast => {\r\n            return(\r\n            <ThreeHoursForecast forecast = {forecast}/>\r\n            )\r\n        })\r\n        return (\r\n            <div className = \"forecast__root-container\">\r\n                    {/*<div className = \"forecast__day-container__date\">{FormatDate(new Date(dayForecast.date))}</div>*/}\r\n                    <div className = \"forecast__day-forecasts\">{oneDayReactElements}</div>\r\n                    <DetailedForecast forecast = {dayForecast}/>\r\n            </div>\r\n\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <div>\r\n                <div className = \"forecast__day-forecasts\"></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default CityForecast","\r\nimport { useEffect, useState} from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst CityAutoSuggest = (props) => {\r\n    \r\n        const [suggestions, setSuggestions] = useState(null);\r\n        const dispatch = useDispatch();\r\n    \r\n        useEffect(() => {\r\n            if (props.city.length > 2) {\r\n                /*fetch(\"//geodb-free-service.wirefreethought.com/v1/geo/cities/?namePrefix=\"+props.city+\"&sort=-population&types=CITY&limit=10\")*/\r\n                fetch(\"https://api.mapbox.com/geocoding/v5/mapbox.places/\"\r\n                +props.city\r\n                +\".json?access_token=pk.eyJ1IjoiY2xlbWVudGJlbmV6ZWNoIiwiYSI6ImNrdmRweXpxMjM3cjUybmx1dG9za24yOGoifQ.8SmT7lwTGEMypFRgCD-HLw&types=place&limit=10&fuzzyMatch=false&language=fr\") \r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    let citiesReactElements = [];\r\n                        citiesReactElements =  data.features.map(element => {\r\n                            return(\r\n                                <div className = \"city-search-form__auto-suggest__city\" onClick = {(e) => {\r\n                                    e.preventDefault();\r\n                                    dispatch({ type: 'api/putCityInState', payload: element.text+\", \"+element.context[element.context.length-1].short_code})\r\n                                    setSuggestions(null);\r\n                                }}>{element.place_name}</div>\r\n                                ) \r\n                        })\r\n                    setSuggestions(citiesReactElements);                \r\n                });\r\n            } else {\r\n                setSuggestions(null);\r\n            }\r\n    }, [props.city]); /*Declaring dependencies*/\r\n            /*rendering suggestions*/\r\n            return (\r\n                <div className = \"city-search-form__auto-suggest\">\r\n                    <div>{suggestions}</div>\r\n                </div>)\r\n\r\n}\r\nexport default CityAutoSuggest","import React, {useState} from \"react\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"../styles/CitySearchForm.scss\"\r\nimport CityAutoSuggest from \"./CityAutoSuggest\";\r\nimport { GetMatchingCities } from \"../functions/GetMatchingCities\"\r\n\r\nconst CitySearchForm = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    /*Setting up hooks for fields\r\n    These will be used to maintain a state for the form and allow the send function to work its magic*/\r\n    const [city, setCity] = React.useState(\"\");\r\n\r\n    return (\r\n\r\n    <form className =\"city-search-form\" \r\n        onSubmit = {(e) => {\r\n    e.preventDefault();\r\n        if (city) {\r\n            dispatch({ type: 'api/putCityInState', payload: city})\r\n        }}}>\r\n        <input placeholder = \"Rechercher une ville\" name = \"city\" value = {city} type = \"text\" onChange={e => {\r\n                    setCity(e.target.value)\r\n                    }}>\r\n        </input>\r\n        <button type = \"submit\"><i class=\"fab fa-searchengin\"></i></button>\r\n        <CityAutoSuggest city = {city}/>\r\n    </form>\r\n    )\r\n\r\n}\r\nexport default CitySearchForm","import { useDispatch } from \"react-redux\";\r\n\r\nexport const OWCityGetData = (city, apiType) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    fetch(\"https://api.openweathermap.org/data/2.5/\"+apiType+\"?q=\"+city+\"&units=metric&appid=c246844ea31d730273416243a59e9e2e\")\r\n    .then (response => response.json())\r\n    .then (response => {\r\n        console.log(response)\r\n        const data = response; //Dans une variable data, on met l'enregistrement renvoyé par l'api\r\n        if (data.cod != \"404\") {\r\n            if (apiType == \"weather\") {\r\n                dispatch({ type: 'api/putWeatherInState', payload: data})\r\n                dispatch({ type: 'api/putTimezoneInState', payload: data.timezone})\r\n            }\r\n            else if (apiType == \"forecast\") {\r\n                dispatch({ type: 'api/putForeCastInState', payload: data})\r\n                dispatch({ type: 'api/putTimezoneInState', payload: data.city.timezone})\r\n            }\r\n        }\r\n        else {\r\n            if (apiType == \"weather\") {\r\n                dispatch({ type: 'api/putWeatherInState', payload: \"error\"})\r\n\r\n            }\r\n            else if (apiType == \"forecast\") {\r\n                dispatch({ type: 'api/putForeCastInState', payload: null})\r\n\r\n            }\r\n        }\r\n        \r\n    })\r\n}\r\n\r\n\r\n\r\n","import { DistinctDays } from \"../functions/DistinctDays\"\r\nimport { FormatDate } from \"../functions/FormatDate.js\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport \"../styles/dayselector.scss\"\r\n\r\n\r\nconst DaySelector = () => {\r\n\r\n    const currentWeatherData = state => state.forecast;\r\n    const  cityCurrentWeatherData = useSelector(currentWeatherData);\r\n    const currentDay = state => state.currentDay;\r\n    const  cityCurrentDay = useSelector(currentDay);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    if (cityCurrentWeatherData != null) {\r\n\r\n        const distinctDays = DistinctDays(cityCurrentWeatherData)\r\n\r\n        if (distinctDays.find(day => day == cityCurrentDay) == undefined) {\r\n            dispatch({ type: 'api/putCurrentTimeInState', payload: null})\r\n            dispatch({ type: 'api/putCurrentDayInState', payload: distinctDays[0]})\r\n        }\r\n        \r\n        const listOfDays = distinctDays.map( day => {\r\n            if (day == cityCurrentDay) {\r\n                return (\r\n                <div className = \"day-selector__day day-selector__day\">\r\n                    <div className = \"day-selector__day__of-week day-selector__day__of-week--current\">{FormatDate(day,\"dayOfWeek\")}</div>\r\n                    <div className = \"day-selector__day__of-month day-selector__day__of-month--current\">{FormatDate(day,\"dayOfMonth\")}</div>\r\n                    {/*<div>{FormatDate(day,\"month\")}</div>*/}\r\n                </div>\r\n                )\r\n            }\r\n            else {\r\n                return <div className = \"day-selector__day\" onClick = {() => {\r\n                            dispatch({ type: 'api/putCurrentDayInState', payload: day})}}>\r\n\r\n                            <div className = \"day-selector__day__of-week\">{FormatDate(day,\"dayOfWeek\")}</div>\r\n                            <div className = \"day-selector__day__of-month\">{FormatDate(day,\"dayOfMonth\")}</div>\r\n                            {/*<div>{FormatDate(day,\"month\")}</div>*/}\r\n\r\n                        </div>\r\n            }\r\n        })\r\n        return <div className = \"day-selector\">{listOfDays}</div>\r\n    }\r\n    else {\r\n        return <div></div>\r\n    }\r\n}\r\nexport default DaySelector","export const DistinctDays = (cityForecastWeatherData) => {\r\n \r\n    //Finding out all distinct dates in the five days forecast\r\n    const distinctDays = cityForecastWeatherData.list.map(forecastData => new Date((forecastData.dt + cityForecastWeatherData.city.timezone)*1000).toLocaleDateString(\"en-US\"))\r\n    .filter((value, index, self) => self.indexOf(value) === index)\r\n    return distinctDays\r\n   }","import { Line, LineChart, XAxis, Tooltip, YAxis, CartesianGrid } from 'recharts';\r\nimport \"../styles/Charts.scss\"\r\nimport { useSelector } from 'react-redux';\r\nimport { GroupForcastByDay } from \"../functions/GroupForcastByDay.js\";\r\nimport { ResponsiveContainer } from 'recharts';\r\n\r\n\r\nconst TempChart= (props) => {\r\n\r\n    const currentStoreDay = state => state.currentDay\r\n    const currentDay = useSelector(currentStoreDay)\r\n\r\n    const forecastWeatherData = state => state.forecast;\r\n    const cityForecastWeatherData = useSelector(forecastWeatherData);\r\n\r\n    const currentStoreTime = state => state.currentTime;\r\n    const storeTime = useSelector(currentStoreTime)\r\n\r\n    const currentStoreTimezone = state => state.timezone;\r\n    const storeTimezone = useSelector(currentStoreTimezone)\r\n\r\n    let tempChartData = [];\r\n\r\n    if (currentDay !== null && cityForecastWeatherData !== null) {\r\n    \r\n        const forecastsGroupedByDay = GroupForcastByDay(cityForecastWeatherData);\r\n        const dayForecast = forecastsGroupedByDay.find(element => element.date === currentDay)\r\n        dayForecast.data.map(element => {\r\n            \r\n            let localTime = element.dt + storeTimezone + new Date(element.dt * 1000).getTimezoneOffset()*60;        \r\n            let currentTime = new Date(localTime* 1000).toLocaleTimeString(\"fr-FR\")\r\n            let currentTimeHHMM = currentTime.substring(0, 5)\r\n            tempChartData.push({'time': currentTimeHHMM, 'temperature' : Math.round(element.main.temp)})\r\n        });\r\n\r\n\r\n\r\n\r\n    return (\r\n    <div className = \"chart-temp\">\r\n        <div className = \"chart-wind__label\">Courbe des températures ( ° Celsius)</div>\r\n    <ResponsiveContainer width=\"100%\" height={280}>    \r\n    <LineChart\r\n          data={tempChartData}\r\n          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\r\n      >\r\n          <XAxis dataKey=\"time\"/>\r\n            <YAxis type=\"number\" domain={['dataMin-2', 'dataMax+2']}/>\r\n          <Tooltip />\r\n\r\n          {/*<Line type=\"monotone\" dataKey=\"time\" stroke=\"red\" yAxisId={0} label={{ fill: 'red', fontSize: 20, fontWeight: \"bold\", background: \"white\" }} />*/}\r\n          <Line type=\"monotone\" dataKey=\"temperature\" stroke=\"#5c83a8\" strokeWidth={10} label={{ fill: 'white', fontWeight: 'bold', fontSize: 25 }} dot={{ fill: '#5c83a8', stroke: '#5c83a8', strokeWidth: 5, r: 17,strokeDasharray:''}}/>\r\n        \r\n      </LineChart>\r\n      </ResponsiveContainer>\r\n      </div>\r\n)}\r\n      else {\r\n          return null;\r\n      }\r\n\r\n}\r\n\r\nexport default TempChart\r\n\r\n","import { ResponsiveContainer, Legend, Bar, BarChart, XAxis, Tooltip, YAxis, CartesianGrid } from 'recharts';\r\nimport \"../styles/Charts.scss\"\r\nimport { useSelector } from 'react-redux';\r\nimport { GroupForcastByDay } from '../functions/GroupForcastByDay';\r\n\r\n\r\nconst WindChart = (props) => {\r\n\r\n    const data =[{time: \"3:00\", wind : 4, gusts : 5}, {time: \"6:00\", wind : 4, gusts : 6}, {time: \"9:00\", wind : 4, gusts : 13}, {time: \"12:00\", wind : 7, gusts : 17}, {time: \"15:00\", wind : 9, gusts : 12}, {time: \"18:00\", wind : 8, gusts : 10}, {time: \"21:00\", wind : 4, gusts : 10}]\r\n\r\n    const currentStoreDay = state => state.currentDay\r\n    const currentDay = useSelector(currentStoreDay)\r\n\r\n    const forecastWeatherData = state => state.forecast;\r\n    const cityForecastWeatherData = useSelector(forecastWeatherData);\r\n\r\n    const currentStoreTime = state => state.currentTime;\r\n    const storeTime = useSelector(currentStoreTime)\r\n\r\n    const currentStoreTimezone = state => state.timezone;\r\n    const storeTimezone = useSelector(currentStoreTimezone)\r\n\r\n    let windChartData = [];\r\n\r\n    if (currentDay !== null && cityForecastWeatherData !== null) {\r\n    \r\n        const forecastsGroupedByDay = GroupForcastByDay(cityForecastWeatherData);\r\n        const dayForecast = forecastsGroupedByDay.find(element => element.date === currentDay)\r\n        dayForecast.data.map(element => {\r\n            \r\n            let localTime = element.dt + storeTimezone + new Date(element.dt * 1000).getTimezoneOffset()*60;        \r\n            let currentTime = new Date(localTime* 1000).toLocaleTimeString(\"fr-FR\")\r\n            let currentTimeHHMM = currentTime.substring(0, 5)\r\n            windChartData.push({'time': currentTimeHHMM, 'vent moyen' : Math.round(element.wind.speed), 'rafales': Math.round(element.wind.gust)})\r\n        });\r\n    \r\n    \r\n    return (\r\n        <div className = \"chart-wind\">\r\n            <div className = \"chart-wind__label\">Vents (m/s)</div>\r\n            <ResponsiveContainer width=\"100%\" height={280}>    \r\n            <BarChart width={730} height={270} data={windChartData} title=\"Vitesse des vents\">\r\n            <Legend layout=\"horizontal\" verticalAlign=\"top\" align=\"center\"/>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"time\" label />\r\n            <YAxis />\r\n            <Tooltip />\r\n\r\n            <Bar dataKey=\"vent moyen\" fill=\"#63b3ff\" />\r\n            <Bar dataKey=\"rafales\" fill=\"orange\" />\r\n            </BarChart>\r\n            </ResponsiveContainer>\r\n        </div>)\r\n        } else {\r\n            return null;\r\n        }\r\n    \r\n\r\n}\r\n\r\nexport default WindChart\r\n\r\n","\nimport '../styles/App.css';\nimport CityCurrentWeather from './CityCurrentWeather';\nimport CityForecast from './CityForecast';\nimport CitySearchForm from './CitySearchForm';\nimport '../styles/base.scss'\nimport { OWCityGetData } from '../functions/OWCityGetData';\nimport { useSelector } from 'react-redux';\nimport DaySelector from './DaySelector';\nimport TempChart from './TempChart';\nimport WindChart from './WindChart';\n\n\n\nfunction App() {\n  const currentCity = state => state.city;\n  const cityName = useSelector(currentCity);\n  OWCityGetData(cityName,\"weather\")\n  OWCityGetData(cityName,\"forecast\")\n  return (\n    <div className=\"App\">\n      <div className = \"search-and-result\">\n        <div className = \"search-and-result__search-days-container\">\n            <CityCurrentWeather/>\n            <CitySearchForm/>\n        </div> \n      </div>\n      <DaySelector/>\n      <CityForecast/>\n      <div className= \"charts-container\">        \n       <TempChart />\n       <WindChart />\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport reportWebVitals from './reportWebVitals'\nimport { Provider } from 'react-redux'\nimport store from \"./components/Store.js\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}