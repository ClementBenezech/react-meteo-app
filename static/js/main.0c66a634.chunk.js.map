{"version":3,"sources":["components/AppReducer.js","components/Store.js","components/constants.js","functions/GetWindDirection.js","components/CityCurrentWeather.jsx","components/ThreeHoursForecast.jsx","functions/FormatDate.js","components/DetailedForecast.jsx","components/CityForecast.jsx","functions/GroupForcastByDay.js","components/CitySearchForm.jsx","functions/OWCityGetData.js","components/DaySelector.jsx","functions/DistinctDays.jsx","components/App.js","reportWebVitals.js","index.js"],"names":["initialState","currentWeather","forecast","city","currentDay","currentTime","store","createStore","state","action","type","payload","console","log","getState","weatherIcons","temperatureIcon","windIcon","GetWindDirection","angle","angleLabel","CityCurrentWeather","cityCurrentWeatherData","useSelector","gust","weatherIcon","filter","element","label","weather","main","icon","weatherIconColor","wind","Math","round","className","name","sys","country","temp","speed","windDirectionIcon","deg","ThreeHoursForecast","props","currentTimeHHMM","Date","dt","toLocaleTimeString","substring","dispatch","useDispatch","storeTime","cardClass","onClick","FormatDate","date","dataType","result","daysArray","monthsArray","getDay","getDate","getMonth","DetailedForecast","cityCurrentTime","undefined","data","find","forecastData","currentIcons","map","current","gusts","direction","bottom","feels_like","grnd_level","humidity","clouds","all","CityForecast","cityForecastWeatherData","cityCurrentDay","forecastsGroupedByDay","distinctDays","list","toLocaleDateString","value","index","self","indexOf","currentDate","currentDateData","push","GroupForcastByDay","dayForecast","oneDayReactElements","CitySearchForm","React","useState","setCity","onSubmit","e","preventDefault","placeholder","onChange","target","class","OWCityGetData","apiType","fetch","then","response","json","cod","DaySelector","day","listOfDays","App","cityName","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+UAAMA,EAAe,CAACC,eAAgB,KAAMC,SAAU,KAAMC,KAAO,WAAYC,WAAa,KAAMC,YAAa,MCI/G,IAAIC,EAAQC,aDFG,WAAmD,IAA/BC,EAA8B,uDAAtBR,EAAcS,EAAQ,uCAE/D,OAAQA,EAAOC,MACX,IAAK,wBACH,OAAO,2BACFF,GADL,IAEEP,eAAiBQ,EAAOE,UAG5B,IAAK,yBACH,OAAO,2BACFH,GADL,IAEEN,SAAWO,EAAOE,UAGtB,IAAK,qBACH,OAAO,2BACFH,GADL,IAEEL,KAAOM,EAAOE,UAGlB,IAAK,2BACH,OAAO,2BACFH,GADL,IAEEJ,WAAaK,EAAOE,UAGxB,IAAK,4BACH,OAAO,2BACFH,GADL,IAEEH,YAAcI,EAAOE,UAI3B,QAGA,OAAOH,MCjCXI,QAAQC,IAAI,kBAAmBP,EAAMQ,YAEtBR,QCRFS,G,MAAe,CACxB,CACI,MAAU,SACV,KAAS,eACT,MAAU,QAEd,CACI,MAAU,OACV,KAAS,6BACT,MAAU,QAEd,CACI,MAAU,QACV,KAAS,aACT,MAAU,UAEd,CACI,MAAU,UACV,KAAS,wBACT,MAAU,UAEd,CACI,MAAU,OACV,KAAS,mBACT,MAAU,YAOLC,EAAkB,oCAClBC,EAAU,cChCVC,EAAmB,SAACC,GAG7B,IAAIC,EAmBJ,OAlBID,EAAQ,IAAMA,GAAS,GACvBC,EAAa,WACND,EAAQ,IAAMA,GAAS,IAC9BC,EAAY,MACLD,EAAQ,KAAOA,GAAS,IAC/BC,EAAa,UACND,EAAQ,KAAOA,GAAS,IAC/BC,EAAY,MACLD,EAAQ,KAAOA,GAAS,IAC/BC,EAAY,YACLD,EAAQ,KAAOA,GAAS,IAC/BC,EAAY,QACLD,EAAQ,KAAOA,GAAS,IAC/BC,EAAY,cACLD,EAAQ,KAAOA,GAAS,MAC/BC,EAAY,QAGTA,G,OC4CIC,EA3DY,WAEvB,IACOC,EAAyBC,aADL,SAAAf,GAAK,OAAIA,EAAMP,kBAI1C,GAA8B,MAA1BqB,EAAgC,CAEpC,GAA+B,UAA3BA,EAAoC,CACpC,IAGIE,EAHEC,EAAcV,EAAaW,QAAO,SAAAC,GAAO,OAAIA,EAAQC,QAAUN,EAAuBO,QAAQ,GAAGC,QAAM,GAAGC,KAC1GC,EAAmBjB,EAAaW,QAAO,SAAAC,GAAO,OAAIA,EAAQC,QAAUN,EAAuBO,QAAQ,GAAGC,QAAM,GAAGF,MAUzH,OALQJ,EADAF,EAAuBW,KAAKT,KACrB,MAAMU,KAAKC,MAAMb,EAAuBW,KAAKT,MAE7C,GAIP,sBAAKY,UAAY,yCAAjB,UACI,sBAAKA,UAAY,+BAAjB,UACI,qBAAKA,UAAY,qCAAjB,SAAuD,oBACvD,mBAAGA,UAAWX,EAAY,2EAA2EO,EAAiB,gDAG1H,qBAAKI,UAAY,uBAAjB,SAAyCd,EAAuBe,KAAK,KAAKf,EAAuBgB,IAAIC,UAGrG,sBAAKH,UAAY,uCAAjB,UACI,sBAAKA,UAAY,uBAAjB,UACI,mBAAGA,UAAWpB,EAAiB,gCAC/B,qBAAKoB,UAAY,8BAAjB,SAAgDF,KAAKC,MAAMb,EAAuBQ,KAAKU,WAE3F,sBAAKJ,UAAY,uBAAjB,UACI,mBAAGA,UAAWnB,EAAU,gCACxB,qBAAKmB,UAAY,8BAAjB,SAAgDF,KAAKC,MAAMb,EAAuBW,KAAKQ,OAAOjB,OAElG,sBAAKY,UAAY,iCAAjB,UACI,mBAAGA,UAAWM,wDACd,qBAAKN,UAAY,wCAAjB,SAA0DlB,EAAiBI,EAAuBW,KAAKU,KAAK,KAAKrB,EAAuBW,KAAKU,IAAI,mBAM7J,OACI,qBAAKP,UAAY,yCAAjB,SACI,qBAAKA,UAAY,qCAAjB,SAAuD,8CAK/D,OAAO,MCXJQ,EA7CY,SAACC,GACxB,IACMC,EADc,IAAIC,KAAyB,IAApBF,EAAM3C,SAAS8C,IAAWC,mBAAmB,SACtCC,UAAU,EAAG,GAC3CzB,EAAcV,EAAaW,QAAO,SAAAC,GAAO,OAAIA,EAAQC,QAAUiB,EAAM3C,SAAS2B,QAAQ,GAAGC,QAAM,GAAGC,KAClGC,EAAmBjB,EAAaW,QAAO,SAAAC,GAAO,OAAIA,EAAQC,QAAUiB,EAAM3C,SAAS2B,QAAQ,GAAGC,QAAM,GAAGF,MAEvGuB,EAAWC,cAGXC,EAAY9B,aADO,SAAAf,GAAK,OAAIA,EAAMH,eAGpCiD,EAAY,iBAMhB,OAJIT,EAAM3C,SAAS8C,IAAMK,IACrBC,GAAYA,6BAIhB,sBAAKlB,UAAakB,EAAWC,QAAW,WACpC3C,QAAQC,IAAIgC,EAAM3C,SAAS8C,IAC3BG,EAAS,CAAEzC,KAAM,4BAA6BC,QAASkC,EAAM3C,SAAS8C,MAF1E,UAKI,sBAAKZ,UAAY,+BAAjB,UACI,qBAAKA,UAAY,qCAAjB,SAAuDU,IACvD,mBAAGV,UAAWX,EAAY,2EAA2EO,OAGzG,sBAAKI,UAAY,uBAAjB,UACI,mBAAGA,UAAWpB,EAAiB,gCAC/B,qBAAKoB,UAAY,8BAAjB,SAAgDF,KAAKC,MAAMU,EAAM3C,SAAS4B,KAAKU,WAEnF,sBAAKJ,UAAY,uBAAjB,UACI,mBAAGA,UAAWnB,EAAU,gCACxB,qBAAKmB,UAAY,8BAAjB,SAAgDF,KAAKC,MAAMU,EAAM3C,SAAS+B,KAAKQ,OAAO,MAAMP,KAAKC,MAAMU,EAAM3C,SAAS+B,KAAKT,WAE/H,sBAAKY,UAAY,iCAAjB,UACI,mBAAGA,UAAWM,wDACd,qBAAKN,UAAY,wCAAjB,SAA0DlB,EAAiB2B,EAAM3C,SAAS+B,KAAKU,KAAK,KAAKE,EAAM3C,SAAS+B,KAAKU,IAAI,iBC3ChIa,EAAa,SAACC,EAAMC,GAC7B,IAEIC,EAFEC,EAAY,CAAC,QAAS,QAAS,WAAY,QAAS,WAAY,SAAU,YAC1EC,EAAc,CAAC,UAAW,aAAW,OAAQ,QAAS,MAAO,OAAQ,UAAW,OAAQ,YAAa,UAAW,WAAY,eAElI,GAAgB,aAAZH,EAEAC,EAASC,EAAU,IAAIb,KAAKU,GAAMK,eAEjC,GAAgB,cAAZJ,EACLC,EAAS,IAAIZ,KAAKU,GAAMM,eAEvB,GAAgB,SAAZL,EACLC,EAASE,EAAY,IAAId,KAAKU,GAAMO,iBAEnC,GAAgB,QAAZN,EAAoB,CAIzBC,EAHkBC,EAAU,IAAIb,KAAKU,GAAMK,SAAU,GAGlC,IAFA,IAAIf,KAAKU,GAAMM,UAEA,IADpBF,EAAY,IAAId,KAAKU,GAAMO,YAK7C,OAAOL,G,yBCuEIM,EAtFU,SAACpB,GAGtB,IAAIpB,EACAO,EAGEkC,EAAkB3C,aADJ,SAAAf,GAAK,OAAIA,EAAMH,eAOnC,QAA6E8D,IAAzEtB,EAAM3C,SAASkE,KAAKC,MAAM,SAAA1C,GAAO,OAAIA,EAAQqB,KAAOkB,KAAgC,CAExF,IAAMI,EAAezB,EAAM3C,SAASkE,KAAKC,MAAM,SAAA1C,GAAO,OAAIA,EAAQqB,KAAOkB,KAEnEK,EAAeD,EAAazC,QAAQ2C,KAAK,SAAA3C,GAG3C,OAFAJ,EAAcV,EAAaW,QAAO,SAAAC,GAAO,OAAIA,EAAQC,QAAUC,EAAQC,QAAM,GAAGC,KAChFC,EAAmBjB,EAAaW,QAAO,SAAAC,GAAO,OAAIA,EAAQC,QAAUC,EAAQC,QAAM,GAAGF,MAC9E,mBAAGQ,UAAWX,EAAY,2EAA2EO,OAG1GyC,EAAU,IAAI1B,KAAuB,IAAlBuB,EAAatB,IAAWC,mBAAmB,SACpErC,QAAQC,IAAI4D,GACZ,IAEIC,EAFE5B,EAAkB2B,EAAQvB,UAAU,EAAG,GAKzCwB,EADAJ,EAAarC,KAAKT,KACV8C,EAAarC,KAAKT,KAGlB,MAGZ,IAAImD,EAAYzD,EAAiBoD,EAAarC,KAAKU,KAEnD,OACI,cAAC,IAAD,CAAMiC,QAAM,EAAZ,SAAa,sBAAKxC,UAAY,oBAAjB,UACD,sBAAKA,UAAY,oCAAjB,UACSmC,EACD,qBAAKnC,UAAY,0BAAjB,SAA4CU,OAEpD,sBAAKV,UAAY,oCAAjB,UACI,qBAAKA,UAAY,gCAAjB,SAAkD,gBAClD,qBAAKA,UAAY,0BAAjB,SAA4CkC,EAAaxC,KAAKU,KAAK,cAEvE,sBAAKJ,UAAY,oCAAjB,UACI,qBAAKA,UAAY,gCAAjB,SAAkD,aAClD,qBAAKA,UAAY,0BAAjB,SAA4CkC,EAAaxC,KAAK+C,WAAW,cAE7E,sBAAKzC,UAAY,oCAAjB,UACI,qBAAKA,UAAY,gCAAjB,SAAkD,8BAClD,qBAAKA,UAAY,0BAAjB,SAA4CkC,EAAaxC,KAAKgD,WAAW,YAE7E,sBAAK1C,UAAY,oCAAjB,UACI,qBAAKA,UAAY,gCAAjB,SAAkD,gBAClD,qBAAKA,UAAY,0BAAjB,SAA4CkC,EAAaxC,KAAKiD,SAAS,UAE3E,sBAAK3C,UAAY,oCAAjB,UACI,qBAAKA,UAAY,gCAAjB,SAAkD,wBAClD,qBAAKA,UAAY,0BAAjB,SAA4CkC,EAAaU,OAAOC,IAAI,UAExE,sBAAK7C,UAAY,oCAAjB,UACI,qBAAKA,UAAY,gCAAjB,SAAkD,eAClD,qBAAKA,UAAY,0BAAjB,SAA4CkC,EAAarC,KAAKQ,MAAM,YAExE,sBAAKL,UAAY,oCAAjB,UACI,qBAAKA,UAAY,gCAAjB,SAAkD,YAClD,qBAAKA,UAAY,0BAAjB,SAA4CsC,EAAM,YAEtD,sBAAKtC,UAAY,oCAAjB,UACI,qBAAKA,UAAY,gCAAjB,SAAkD,cAClD,qBAAKA,UAAY,0BAAjB,SAA4CuC,EAAU,KAAKL,EAAarC,KAAKU,IAAI,kBASjG,OAAO,MCxCAuC,EA1CM,WAEjB,IACMC,EAA0B5D,aADJ,SAAAf,GAAK,OAAIA,EAAMN,YAIrCkF,EAAiB7D,aADJ,SAAAf,GAAK,OAAIA,EAAMJ,cAGlC,GAAgC,OAA5B+E,EAAkC,CAElC,IAAME,EClBoB,SAACF,GAGlC,IAAMG,EAAeH,EAAwBI,KAAKf,KAAI,SAAAF,GAAY,OAAI,IAAIvB,KAAuB,IAAlBuB,EAAatB,IAAWwC,mBAAmB,YACzH9D,QAAO,SAAC+D,EAAOC,EAAOC,GAAf,OAAwBA,EAAKC,QAAQH,KAAWC,KAKlDL,EAAwB,GAkB9B,OAfAC,EAAad,KAAI,SAAAqB,GAEb,IAAMC,EAAkB,GAExBX,EAAwBI,KAAKf,KAAI,SAAAF,GAEzB,IAAIvB,KAAuB,IAAlBuB,EAAatB,IAAWwC,mBAAmB,WAAaK,GAEjEC,EAAgBC,KAAKzB,MAI7Be,EAAsBU,KAAK,CAAC,KAASF,EAAa,KAASC,OAGxDT,EDT8BW,CAAkBb,GAC1Cc,EAAcZ,EAAsBhB,MAAK,SAAA1C,GAAO,OAAIA,EAAQ8B,OAAS2B,KAIrEc,EAAsBD,EAAY7B,KAAKI,KAAI,SAAAtE,GAC7C,OACA,cAAC,EAAD,CAAoBA,SAAYA,OAGpC,OACI,sBAAKkC,UAAY,2BAAjB,UAEQ,qBAAKA,UAAY,0BAAjB,SAA4C8D,IAC5C,cAAC,EAAD,CAAkBhG,SAAY+F,OAM1C,OACI,8BACI,8BAAMd,O,QERPgB,G,MA3BQ,WAEnB,IAAMhD,EAAWC,cAIjB,EAAwBgD,IAAMC,SAAS,IAAvC,mBAAOlG,EAAP,KAAamG,EAAb,KAIA,OACA,uBAAMlE,UAAW,mBAAmBmE,SAAY,SAACC,GAC7CA,EAAEC,iBACEtG,GACAgD,EAAS,CAAEzC,KAAM,qBAAsBC,QAASR,KAHxD,UAOI,uBAAOuG,YAAc,uBAAuBrE,KAAO,OAAOoD,MAAStF,EAAMO,KAAO,OAAOiG,SAAU,SAAAH,GACrFF,EAAQE,EAAEI,OAAOnB,UAG7B,wBAAQ/E,KAAO,SAAf,SAAwB,mBAAGmG,MAAM,8BCzB5BC,G,MAAgB,SAAC3G,EAAM4G,GAEhC,IAAM5D,EAAWC,cAEjB4D,MAAM,2CAA2CD,EAAQ,MAAM5G,EAAK,wDACnE8G,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAM,SAAAC,GACHtG,QAAQC,IAAIqG,GACZ,IAAM9C,EAAO8C,EACG,OAAZ9C,EAAKgD,IACU,WAAXL,EACA5D,EAAS,CAAEzC,KAAM,wBAAyBC,QAASyD,IAEnC,YAAX2C,GACL5D,EAAS,CAAEzC,KAAM,yBAA0BC,QAASyD,IAIzC,WAAX2C,EACA5D,EAAS,CAAEzC,KAAM,wBAAyBC,QAAS,UAEnC,YAAXoG,GACL5D,EAAS,CAAEzC,KAAM,yBAA0BC,QAAS,YC4BrD0G,G,MA9CK,WAEhB,IACO/F,EAAyBC,aADL,SAAAf,GAAK,OAAIA,EAAMN,YAGnCkF,EAAiB7D,aADL,SAAAf,GAAK,OAAIA,EAAMJ,cAG5B+C,EAAWC,cAEjB,GAA8B,MAA1B9B,EAAgC,CAEhC,IAAMgE,EAA4BhE,ECdOiE,KAAKf,KAAI,SAAAF,GAAY,OAAI,IAAIvB,KAAuB,IAAlBuB,EAAatB,IAAWwC,mBAAmB,YACzH9D,QAAO,SAAC+D,EAAOC,EAAOC,GAAf,OAAwBA,EAAKC,QAAQH,KAAWC,UDeGvB,GAAnDmB,EAAajB,MAAK,SAAAiD,GAAG,OAAIA,GAAOlC,OAChCjC,EAAS,CAAEzC,KAAM,4BAA6BC,QAAS,OACvDwC,EAAS,CAAEzC,KAAM,2BAA4BC,QAAS2E,EAAa,MAIvE,IAAMiC,EAAajC,EAAad,KAAK,SAAA8C,GACjC,OAAIA,GAAOlC,EAEP,sBAAKhD,UAAY,+CAAjB,UACI,8BAAMoB,EAAW8D,EAAI,eACrB,8BAAM9D,EAAW8D,EAAI,mBAMlB,sBAAKlF,UAAY,oBAAoBmB,QAAW,WAC3CJ,EAAS,CAAEzC,KAAM,2BAA4BC,QAAS2G,KAD3D,UAGK,8BAAM9D,EAAW8D,EAAI,eACrB,8BAAM9D,EAAW8D,EAAI,sBAMzC,OAAO,qBAAKlF,UAAY,eAAjB,SAAiCmF,IAGxC,OAAO,0BEpBAC,MAnBf,WACE,IACMC,EAAWlG,aADG,SAAAf,GAAK,OAAIA,EAAML,QAInC,OAFA2G,EAAcW,EAAS,WACvBX,EAAcW,EAAS,YAErB,sBAAKrF,UAAU,MAAf,UACE,sBAAKA,UAAY,oBAAjB,UACE,sBAAKA,UAAY,2CAAjB,UACI,cAAC,EAAD,IACA,cAAC,EAAD,OAEJ,cAAC,EAAD,OAEF,cAAC,EAAD,QCZSsF,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAU9H,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJ+H,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0c66a634.chunk.js","sourcesContent":["const initialState = {currentWeather: null, forecast :null, city : \"toulouse\", currentDay : null, currentTime: null}\r\n// Use the initialState as a default value\r\nexport default function AppReducer(state = initialState, action) {\r\n  // The reducer normally looks at the action type field to decide what happens  \r\n  switch (action.type) {  \r\n      case 'api/putWeatherInState' : {\r\n        return {\r\n          ...state,\r\n          currentWeather : action.payload\r\n        }\r\n      }\r\n      case 'api/putForeCastInState' : {\r\n        return {\r\n          ...state,\r\n          forecast : action.payload\r\n        }\r\n      }\r\n      case 'api/putCityInState' : {\r\n        return {\r\n          ...state,\r\n          city : action.payload\r\n        }\r\n      }\r\n      case 'api/putCurrentDayInState' : {\r\n        return {\r\n          ...state,\r\n          currentDay : action.payload\r\n        }\r\n      }\r\n      case 'api/putCurrentTimeInState' : {\r\n        return {\r\n          ...state,\r\n          currentTime : action.payload\r\n        }\r\n      }\r\n\r\n    default:      \r\n    // If this reducer doesn't recognize the action type, or doesn't      \r\n    // care about this specific action, return the existing state unchanged \r\n    return state \r\n}}","import { createStore } from 'redux'\r\nimport AppReducer from \"./AppReducer\"\r\n\r\n//Creating the store\r\nlet store = createStore(AppReducer);\r\n//chacking initial value\r\nconsole.log('Initial state: ', store.getState());\r\n\r\nexport default store","export const weatherIcons = [\r\n    {\r\n        \"label\" : \"Clouds\",\r\n        \"icon\" : \"fas fa-cloud\",\r\n        \"color\" : \"grey\"\r\n    },\r\n    {\r\n        \"label\" : \"Rain\",\r\n        \"icon\" : \"fas fa-cloud-showers-heavy\",\r\n        \"color\" : \"blue\"\r\n    },\r\n    {\r\n        \"label\" : \"Clear\",\r\n        \"icon\" : \"fas fa-sun\",\r\n        \"color\" : \"yellow\"\r\n    },\r\n    {\r\n        \"label\" : \"Drizzle\",\r\n        \"icon\" : \"fas fa-cloud-sun-rain\",\r\n        \"color\" : \"orange\"\r\n    },\r\n    {\r\n        \"label\" : \"Snow\",\r\n        \"icon\" : \"far fa-snowflake\",\r\n        \"color\" : \"orange\"\r\n    }\r\n\r\n\r\n\r\n]\r\n\r\nexport const temperatureIcon = \"fas fa-thermometer-three-quarters\"\r\nexport const windIcon =\"fas fa-wind\"\r\nexport const windDirectionIcon = \"far fa-compass\"","export const GetWindDirection = (angle) => {\r\n \r\n    //Finding out all distinct dates in the five days forecast\r\n    let angleLabel;\r\n    if (angle > 15 && angle <= 60) {\r\n        angleLabel = \"Nord-Est\"\r\n    } else if (angle > 60 && angle <= 105) {\r\n        angleLabel =\"Est\"\r\n    } else if (angle > 105 && angle <= 150) {\r\n        angleLabel = \"Sud-Est\"\r\n    } else if (angle > 150 && angle <= 195) {\r\n        angleLabel =\"Sud\"\r\n    } else if (angle > 195 && angle <= 240) {\r\n        angleLabel =\"Sud-Ouest\"\r\n    } else if (angle > 240 && angle <= 285) {\r\n        angleLabel =\"Ouest\"\r\n    } else if (angle > 285 && angle <= 330) {\r\n        angleLabel =\"Nord-Ouest\"\r\n    } else if (angle > 330 || angle <= 15) {\r\n        angleLabel =\"Nord\"\r\n    }\r\n\r\n    return angleLabel\r\n}","import { useSelector } from \"react-redux\";\r\nimport store from \"./Store.js\";\r\nimport \"../styles/forecast.scss\"\r\nimport { temperatureIcon, windIcon, windDirectionIcon } from \"./constants.js\";\r\nimport { weatherIcons } from \"./constants.js\";\r\nimport { GetWindDirection } from \"../functions/GetWindDirection\"\r\n\r\nconst CityCurrentWeather = () => { \r\n\r\n    const currentWeatherData = state => state.currentWeather;\r\n    const  cityCurrentWeatherData = useSelector(currentWeatherData);\r\n    \r\n\r\n    if (cityCurrentWeatherData != null) {        \r\n        \r\n    if (cityCurrentWeatherData !== \"error\") {\r\n        const weatherIcon = weatherIcons.filter(element => element.label === cityCurrentWeatherData.weather[0].main)[0].icon\r\n        const weatherIconColor = weatherIcons.filter(element => element.label === cityCurrentWeatherData.weather[0].main)[0].label\r\n\r\n        let gust;\r\n        \r\n        if (cityCurrentWeatherData.wind.gust) {\r\n            gust = \" - \"+Math.round(cityCurrentWeatherData.wind.gust)\r\n        } else {\r\n            gust = \"\";\r\n        }\r\n\r\n    return (\r\n            <div className = \"forecast__card forecast__card--current\">\r\n                <div className = \"forecast__card__time-weather\">\r\n                    <div className = \"forecast__card__time-weather__time\">{\"Actuellement...\"}</div>\r\n                    <i className={weatherIcon+\" forecast__card__time-weather__icon forecast__card__time-weather__icon--\"+weatherIconColor+\" forecast__card__time-weather__icon--big\"}></i>\r\n                </div>\r\n                {/*<div>{props.forecast.weather[0].description}</div>*/}\r\n                <div className = \"forecast__card__city\">{cityCurrentWeatherData.name+\", \"+cityCurrentWeatherData.sys.country}</div>\r\n                    {/*<div>{cityCurrentWeatherData.weather[0].main}</div>*/}\r\n                \r\n                <div className = \"forecast__card__parameters-container\">\r\n                    <div className = \"forecast__card__temp\">\r\n                        <i className={temperatureIcon +\" forecast__card__temp__icon\"}></i>\r\n                        <div className = \"forecast__card__temp__value\">{Math.round(cityCurrentWeatherData.main.temp)}</div>\r\n                    </div>\r\n                    <div className = \"forecast__card__wind\">\r\n                        <i className={windIcon +\" forecast__card__wind__icon\"}></i>\r\n                        <div className = \"forecast__card__wind__value\">{Math.round(cityCurrentWeatherData.wind.speed)+gust}</div>\r\n                    </div>\r\n                    <div className = \"forecast__card__wind-direction\">\r\n                        <i className={windDirectionIcon +\" forecast__card__wind-direction__icon\"}></i>\r\n                        <div className = \"forecast__card__wind-direction__value\">{GetWindDirection(cityCurrentWeatherData.wind.deg)+\" (\"+cityCurrentWeatherData.wind.deg+\"°)\"}</div>\r\n                    </div>\r\n                </div>\r\n            </div>)\r\n        } \r\n        else {\r\n            return (\r\n                <div className = \"forecast__card forecast__card--current\">\r\n                    <div className = \"forecast__card__time-weather__time\">{\"So sorry, I could not find this city :(\"}</div>\r\n                </div>\r\n            )\r\n        }}\r\n        else {\r\n            return null;\r\n        }\r\n\r\n    \r\n}\r\nexport default CityCurrentWeather","import { weatherIcons } from \"./constants\"\r\nimport { temperatureIcon, windIcon,windDirectionIcon } from \"./constants\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { GetWindDirection } from \"../functions/GetWindDirection\"\r\n\r\nconst ThreeHoursForecast = (props) => {\r\n    const currentTime = new Date(props.forecast.dt * 1000).toLocaleTimeString(\"fr-FR\")\r\n    const currentTimeHHMM = currentTime.substring(0, 5)\r\n    const weatherIcon = weatherIcons.filter(element => element.label === props.forecast.weather[0].main)[0].icon\r\n    const weatherIconColor = weatherIcons.filter(element => element.label === props.forecast.weather[0].main)[0].label\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const currentStoreTime = state => state.currentTime;\r\n    const storeTime = useSelector(currentStoreTime)\r\n\r\n    let cardClass = \"forecast__card\";\r\n\r\n    if (props.forecast.dt == storeTime) {\r\n        cardClass = cardClass+\" \"+\"forecast__card--selected\"\r\n    }\r\n\r\n    return (\r\n    <div className = {cardClass} onClick = {() => {\r\n        console.log(props.forecast.dt)\r\n        dispatch({ type: 'api/putCurrentTimeInState', payload: props.forecast.dt})\r\n    }\r\n    }>\r\n        <div className = \"forecast__card__time-weather\">\r\n            <div className = \"forecast__card__time-weather__time\">{currentTimeHHMM}</div>\r\n            <i className={weatherIcon+\" forecast__card__time-weather__icon forecast__card__time-weather__icon--\"+weatherIconColor}></i>\r\n        </div>\r\n        {/*<div>{props.forecast.weather[0].description}</div>*/}\r\n        <div className = \"forecast__card__temp\">\r\n            <i className={temperatureIcon +\" forecast__card__temp__icon\"}></i>\r\n            <div className = \"forecast__card__temp__value\">{Math.round(props.forecast.main.temp)}</div>\r\n        </div>\r\n        <div className = \"forecast__card__wind\">\r\n            <i className={windIcon +\" forecast__card__wind__icon\"}></i>\r\n            <div className = \"forecast__card__wind__value\">{Math.round(props.forecast.wind.speed)+\" - \"+Math.round(props.forecast.wind.gust)}</div>\r\n        </div>\r\n        <div className = \"forecast__card__wind-direction\">\r\n            <i className={windDirectionIcon +\" forecast__card__wind-direction__icon\"}></i>\r\n            <div className = \"forecast__card__wind-direction__value\">{GetWindDirection(props.forecast.wind.deg)+\" (\"+props.forecast.wind.deg+\"°)\"}</div>\r\n        </div>\r\n        \r\n    </div>\r\n    )\r\n}\r\n\r\nexport default ThreeHoursForecast","export const FormatDate = (date, dataType) => {\r\n    const daysArray = [\"Lundi\", \"Mardi\", \"Mercredi\", \"Jeudi\", \"Vendredi\", \"Samedi\", \"Dimanche\"]\r\n    const monthsArray = [\"Janvier\", \"Février\", \"Mars\", \"Avril\", \"Mai\", \"Juin\", \"Juillet\", \"Aout\", \"septembre\", \"octobre\", \"novembre\", \"décembre\"] \r\n    let result;\r\n    if (dataType == \"dayOfWeek\") {\r\n\r\n        result = daysArray[new Date(date).getDay()];\r\n    }\r\n    else if (dataType == \"dayOfMonth\") {\r\n        result = new Date(date).getDate();\r\n    }\r\n    else if (dataType == \"month\") {\r\n        result = monthsArray[new Date(date).getMonth()];\r\n    }\r\n    else if (dataType == \"full\") {\r\n        const dayOfWeek = daysArray[new Date(date).getDay() -1];\r\n        const dayOfMonth = new Date(date).getDate();\r\n        const month = monthsArray[new Date(date).getMonth()];\r\n        result = dayOfWeek+\" \"+dayOfMonth+\" \"+month\r\n    }\r\n\r\n    \r\n    return result\r\n}","import \"../styles/DetailedForecast.scss\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { weatherIcons } from \"./constants\"\r\nimport { FormatDate } from \"../functions/FormatDate\"\r\nimport Fade from \"react-reveal\"\r\nimport { GetWindDirection } from \"../functions/GetWindDirection\"\r\n\r\nconst DetailedForecast = (props) => {\r\n\r\n\r\n    let weatherIcon;\r\n    let weatherIconColor;\r\n\r\n    const currentTime = state => state.currentTime;\r\n    const cityCurrentTime = useSelector(currentTime);\r\n\r\n    /*const currentForecast = state => state.forecast;\r\n    const cityCurrentForecast = useSelector(currentForecast);*/\r\n\r\n\r\n    if (props.forecast.data.find( element => element.dt === cityCurrentTime) !== undefined) {\r\n\r\n    const forecastData = props.forecast.data.find( element => element.dt === cityCurrentTime);\r\n\r\n    const currentIcons = forecastData.weather.map( weather => {\r\n        weatherIcon = weatherIcons.filter(element => element.label === weather.main)[0].icon\r\n        weatherIconColor = weatherIcons.filter(element => element.label === weather.main)[0].label\r\n        return <i className={weatherIcon+\" forecast__card__time-weather__icon forecast__card__time-weather__icon--\"+weatherIconColor}></i>\r\n    })\r\n\r\n    const current = new Date(forecastData.dt * 1000).toLocaleTimeString(\"fr-FR\")\r\n    console.log(current)\r\n    const currentTimeHHMM = current.substring(0, 5)\r\n\r\n    let gusts; \r\n    \r\n    if (forecastData.wind.gust) {\r\n        gusts = forecastData.wind.gust\r\n    }\r\n    else {\r\n        gusts = \" / \"\r\n    }\r\n\r\n    let direction = GetWindDirection(forecastData.wind.deg)\r\n\r\n    return (\r\n        <Fade bottom><div className = \"detailed-forecast\">\r\n                    <div className = \"detailed-forecast__data-container\">\r\n                            {currentIcons}\r\n                            <div className = \"detailed-forecast__time\">{currentTimeHHMM}</div>\r\n                        </div>\r\n                    <div className = \"detailed-forecast__data-container\">\r\n                        <div className = \"detailed-forecast__data-label\">{\"Temperature\"}</div>\r\n                        <div className = \"detailed-forecast__data\">{forecastData.main.temp+\" °C\"}</div>\r\n                    </div>\r\n                    <div className = \"detailed-forecast__data-container\">\r\n                        <div className = \"detailed-forecast__data-label\">{\"Ressenti\"}</div>\r\n                        <div className = \"detailed-forecast__data\">{forecastData.main.feels_like+\" °C\"}</div>\r\n                    </div>\r\n                    <div className = \"detailed-forecast__data-container\">\r\n                        <div className = \"detailed-forecast__data-label\">{\"Pression Atmosphérique\"}</div>\r\n                        <div className = \"detailed-forecast__data\">{forecastData.main.grnd_level+\" hPa\"}</div>\r\n                    </div>\r\n                    <div className = \"detailed-forecast__data-container\">\r\n                        <div className = \"detailed-forecast__data-label\">{\"Humidité\"}</div>\r\n                        <div className = \"detailed-forecast__data\">{forecastData.main.humidity+\" %\"}</div>\r\n                    </div>\r\n                    <div className = \"detailed-forecast__data-container\">\r\n                        <div className = \"detailed-forecast__data-label\">{\"Couverture nuageuse\"}</div>\r\n                        <div className = \"detailed-forecast__data\">{forecastData.clouds.all+\" %\"}</div>\r\n                    </div>\r\n                    <div className = \"detailed-forecast__data-container\">\r\n                        <div className = \"detailed-forecast__data-label\">{\"Vent Moyen\"}</div>\r\n                        <div className = \"detailed-forecast__data\">{forecastData.wind.speed+\" m/s\"}</div>\r\n                    </div>\r\n                    <div className = \"detailed-forecast__data-container\">\r\n                        <div className = \"detailed-forecast__data-label\">{\"Rafales\"}</div>\r\n                        <div className = \"detailed-forecast__data\">{gusts+\" m/s\"}</div>\r\n                    </div>\r\n                    <div className = \"detailed-forecast__data-container\">\r\n                        <div className = \"detailed-forecast__data-label\">{\"Direction\"}</div>\r\n                        <div className = \"detailed-forecast__data\">{direction+\" (\"+forecastData.wind.deg+\"°)\"}</div>\r\n                    </div>\r\n\r\n\r\n\r\n        </div></Fade>\r\n\r\n    )\r\n    } else {\r\n        return null;\r\n    }\r\n    }\r\nexport default DetailedForecast","import { useSelector } from \"react-redux\";\r\nimport store from \"./Store.js\";\r\nimport ThreeHoursForecast from \"./ThreeHoursForecast.jsx\";\r\nimport \"../styles/forecast.scss\"\r\nimport { GroupForcastByDay } from \"../functions/GroupForcastByDay.js\";\r\nimport { FormatDate } from \"../functions/FormatDate.js\";\r\nimport DetailedForecast from \"./DetailedForecast.jsx\";\r\n\r\nconst CityForecast = () => { \r\n\r\n    const forecastWeatherData = state => state.forecast;\r\n    const cityForecastWeatherData = useSelector(forecastWeatherData);\r\n\r\n    const currentDay = state => state.currentDay;\r\n    const cityCurrentDay = useSelector(currentDay);\r\n\r\n    if (cityForecastWeatherData !== null) {\r\n\r\n        const forecastsGroupedByDay = GroupForcastByDay(cityForecastWeatherData);\r\n        const dayForecast = forecastsGroupedByDay.find(element => element.date === cityCurrentDay)\r\n        \r\n        //Creating react Elements array for each day\r\n        \r\n        const oneDayReactElements = dayForecast.data.map(forecast => {\r\n            return(\r\n            <ThreeHoursForecast forecast = {forecast}/>\r\n            )\r\n        })\r\n        return (\r\n            <div className = \"forecast__root-container\">\r\n                    {/*<div className = \"forecast__day-container__date\">{FormatDate(new Date(dayForecast.date))}</div>*/}\r\n                    <div className = \"forecast__day-forecasts\">{oneDayReactElements}</div>\r\n                    <DetailedForecast forecast = {dayForecast}/>\r\n            </div>\r\n\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <div>\r\n                <div>{cityForecastWeatherData}</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default CityForecast"," export const GroupForcastByDay = (cityForecastWeatherData) => {\r\n \r\n //Finding out all distinct dates in the five days forecast\r\n const distinctDays = cityForecastWeatherData.list.map(forecastData => new Date(forecastData.dt * 1000).toLocaleDateString(\"en-US\"))\r\n .filter((value, index, self) => self.indexOf(value) === index)\r\n\r\n //PUSH THIS VALUE TO STATE USING DISPATCH\r\n\r\n //Creating Array with forecasts grouped by day.\r\n const forecastsGroupedByDay = [];\r\n\r\n //Creating a new array with the api response.\r\n distinctDays.map(currentDate => {\r\n     //creating a new array to store all forecasts for one distinct day\r\n     const currentDateData = []\r\n     //For each forecast in the state\r\n     cityForecastWeatherData.list.map(forecastData => {\r\n         //If the date is the current date\r\n         if (new Date(forecastData.dt * 1000).toLocaleDateString(\"en-US\") === currentDate) {\r\n             //Insert data in the newly created array currentDateData\r\n             currentDateData.push(forecastData)\r\n         }\r\n     })\r\n     //Push an object composed by the current date and all related forecasts datas in forecastsGroupedByDay\r\n     forecastsGroupedByDay.push({\"date\" : currentDate, \"data\" : currentDateData})\r\n })\r\n\r\n return forecastsGroupedByDay\r\n}","import React, {useState} from \"react\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"../styles/CitySearchForm.scss\"\r\n\r\nconst CitySearchForm = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    /*Setting up hooks for fields\r\n    These will be used to maintain a state for the form and allow the send function to work its magic*/\r\n    const [city, setCity] = React.useState(\"\");\r\n\r\n\r\n\r\n    return (\r\n    <form className =\"city-search-form\" onSubmit = {(e) => {\r\n        e.preventDefault();\r\n        if (city) {\r\n            dispatch({ type: 'api/putCityInState', payload: city})\r\n        }\r\n\r\n    }}>\r\n        <input placeholder = \"Rechercher une ville\" name = \"city\" value = {city} type = \"text\" onChange={e => {\r\n                    setCity(e.target.value)\r\n                    }}>\r\n        </input>\r\n        <button type = \"submit\"><i class=\"fab fa-searchengin\"></i></button>\r\n    </form>\r\n    )\r\n\r\n}\r\nexport default CitySearchForm","import { useDispatch } from \"react-redux\";\r\n\r\nexport const OWCityGetData = (city, apiType) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    fetch(\"https://api.openweathermap.org/data/2.5/\"+apiType+\"?q=\"+city+\"&units=metric&appid=c246844ea31d730273416243a59e9e2e\")\r\n    .then (response => response.json())\r\n    .then (response => {\r\n        console.log(response)\r\n        const data = response; //Dans une variable data, on met l'enregistrement renvoyé par l'api\r\n        if (data.cod != \"404\") {\r\n            if (apiType == \"weather\") {\r\n                dispatch({ type: 'api/putWeatherInState', payload: data})\r\n            }\r\n            else if (apiType == \"forecast\") {\r\n                dispatch({ type: 'api/putForeCastInState', payload: data})\r\n            }\r\n        }\r\n        else {\r\n            if (apiType == \"weather\") {\r\n                dispatch({ type: 'api/putWeatherInState', payload: \"error\"})\r\n            }\r\n            else if (apiType == \"forecast\") {\r\n                dispatch({ type: 'api/putForeCastInState', payload: null})\r\n            }\r\n        }\r\n        \r\n    })\r\n}\r\n\r\n\r\n\r\n","import { DistinctDays } from \"../functions/DistinctDays\"\r\nimport { FormatDate } from \"../functions/FormatDate.js\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport \"../styles/dayselector.scss\"\r\n\r\n\r\nconst DaySelector = () => {\r\n\r\n    const currentWeatherData = state => state.forecast;\r\n    const  cityCurrentWeatherData = useSelector(currentWeatherData);\r\n    const currentDay = state => state.currentDay;\r\n    const  cityCurrentDay = useSelector(currentDay);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    if (cityCurrentWeatherData != null) {\r\n\r\n        const distinctDays = DistinctDays(cityCurrentWeatherData)\r\n\r\n        if (distinctDays.find(day => day == cityCurrentDay) == undefined) {\r\n            dispatch({ type: 'api/putCurrentTimeInState', payload: null})\r\n            dispatch({ type: 'api/putCurrentDayInState', payload: distinctDays[0]})\r\n            \r\n        }\r\n        \r\n        const listOfDays = distinctDays.map( day => {\r\n            if (day == cityCurrentDay) {\r\n                return (\r\n                <div className = \"day-selector__day day-selector__day--current\">\r\n                    <div>{FormatDate(day,\"dayOfWeek\")}</div>\r\n                    <div>{FormatDate(day,\"dayOfMonth\")}</div>\r\n                    {/*<div>{FormatDate(day,\"month\")}</div>*/}\r\n                </div>\r\n                )\r\n            }\r\n            else {\r\n                return <div className = \"day-selector__day\" onClick = {() => {\r\n                            dispatch({ type: 'api/putCurrentDayInState', payload: day})}}>\r\n\r\n                            <div>{FormatDate(day,\"dayOfWeek\")}</div>\r\n                            <div>{FormatDate(day,\"dayOfMonth\")}</div>\r\n                            {/*<div>{FormatDate(day,\"month\")}</div>*/}\r\n\r\n                        </div>\r\n            }\r\n        })\r\n        return <div className = \"day-selector\">{listOfDays}</div>\r\n    }\r\n    else {\r\n        return <div></div>\r\n    }\r\n}\r\nexport default DaySelector","export const DistinctDays = (cityForecastWeatherData) => {\r\n \r\n    //Finding out all distinct dates in the five days forecast\r\n    const distinctDays = cityForecastWeatherData.list.map(forecastData => new Date(forecastData.dt * 1000).toLocaleDateString(\"en-US\"))\r\n    .filter((value, index, self) => self.indexOf(value) === index)\r\n    return distinctDays\r\n   }","\nimport '../styles/App.css';\nimport CityCurrentWeather from './CityCurrentWeather';\nimport CityForecast from './CityForecast';\nimport CitySearchForm from './CitySearchForm';\nimport '../styles/base.scss'\nimport { OWCityGetData } from '../functions/OWCityGetData';\nimport { useSelector } from 'react-redux';\nimport DaySelector from './DaySelector';\n\nfunction App() {\n  const currentCity = state => state.city;\n  const cityName = useSelector(currentCity);\n  OWCityGetData(cityName,\"weather\")\n  OWCityGetData(cityName,\"forecast\")\n  return (\n    <div className=\"App\">\n      <div className = \"search-and-result\">\n        <div className = \"search-and-result__search-days-container\">\n            <CitySearchForm/>\n            <DaySelector/>\n        </div>\n        <CityCurrentWeather/>\n      </div>\n      <CityForecast/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport reportWebVitals from './reportWebVitals'\nimport { Provider } from 'react-redux'\nimport store from \"./components/Store.js\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}